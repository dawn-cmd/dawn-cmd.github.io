<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LightString</title>
  
  <subtitle>LightString</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-21T16:36:43.576Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LightString</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Red Black Tree</title>
    <link href="http://example.com/2023/02/22/Red-Black-Tree/"/>
    <id>http://example.com/2023/02/22/Red-Black-Tree/</id>
    <published>2023-02-23T03:28:39.000Z</published>
    <updated>2023-03-21T16:36:43.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>In computer science, Red-Black Trees are a type of self-balancing binary search tree that are used to store and retrieve elements in sorted order with O(log n) time complexity for all major operations. They are designed to be memory-efficient and balanced, making them more efficient than other balanced trees like AVL trees. In this article, we have discussed the implementation of Red-Black Trees in Rust, a modern programming language designed for performance and safety. We have covered the structure of the tree, as well as the functions for insertion, deletion, and searching. Additionally, we have covered the fix functions that are used to restore the height balance and color balance properties of the tree after each insertion and deletion. Finally, we have discussed the left and right rotation functions that are used to maintain the balance properties of the Red-Black Tree. By using Rust to implement Red-Black Trees, we can take advantage of the language’s performance and safety features to create an efficient and reliable data structure.</p><h2 id="What-is-Red-Black-Tree-RBT"><a href="#What-is-Red-Black-Tree-RBT" class="headerlink" title="What is Red Black Tree (RBT)?"></a>What is Red Black Tree (RBT)?</h2><p>Red-Black Trees are binary search trees where each node is colored either red or black. The color of the node is used to balance the tree so that the longest path from the root to any leaf node is no more than twice as long as the shortest path from the root to any other leaf node. This property is known as the height balance property.</p><h2 id="Red-Black-Trees-are-constructed-with-the-following-rules"><a href="#Red-Black-Trees-are-constructed-with-the-following-rules" class="headerlink" title="Red-Black Trees are constructed with the following rules"></a>Red-Black Trees are constructed with the following rules</h2><ol><li>Each node is either red or black.</li><li>The root node is always black.</li><li>Every leaf (NIL) node is black.</li><li>If a node is red, then both its children must be black.</li><li>Every path from a given node to any of its descendant NIL nodes must contain the same number of black nodes.</li></ol><p>By assigning each node with a color and by limiting the number of consecutive colored nodes, RBT ensures that the longest branches will never exceed twice the size of the shortest branches, thus providing a more stable and effective tree. For reference, here’s a visual representation of an RBT:</p><p><img src="https://drive.google.com/uc?export=view&id=1uj8c9Md7JGe6XXoAX6HQEvo6oaGgzPHc" alt="photo_2023-02-22_21-58-43.jpg"></p><p>Here’s a comparison between BST and RBT when we insert “1, 2, 3, 4, 5” in order, demonstrating why RBT is far more efficient than BST when sorted elements are inserted:</p><p><img src="https://drive.google.com/uc?export=view&id=1ZgmVqbTb-yAB9iDVdC8rLuXuojKOPELT" alt="photo_2023-02-22_22-32-17.jpg"></p><p>Obviously, BST will become extremely low effective when receiving a sorted sequence. And RBT can become more balanced under this situation.</p><h2 id="Red-Black-Tree-Functions"><a href="#Red-Black-Tree-Functions" class="headerlink" title="Red-Black Tree Functions"></a>Red-Black Tree Functions</h2><p>A Red-Black Tree supports the following functions:</p><ol><li><p>Insertion: To insert a new node into the Red-Black Tree, we first create a new node with the given key and value. We then traverse the tree to find the correct location to insert the new node. If the tree is empty, we simply make the new node the root of the tree. If the tree is not empty, we compare the new node’s key to the key of the current node we are examining. If the new node’s key is less than the current node’s key, we move to the left child of the current node. If the new node’s key is greater than the current node’s key, we move to the right child of the current node. We repeat this process until we find an empty location in the tree where we can insert the new node.</p></li><li><p>Deletion: To delete a node from the Red-Black Tree, we first search for the node with the given key. If the node is not found, we simply return without doing anything. If the node is found, we replace it with its successor, which is the node with the smallest key in the node’s right subtree. We then delete the successor node from the tree using a similar process.</p></li><li><p>Searching: Searching for a node in the Red-Black Tree is similar to searching in a binary search tree. We start at the root node and compare the given key with the key of the current node. If the keys are equal, we return the value of the current node. If the given key is less than the key of the current node, we move to the left child. If the given key is greater than the key of the current node, we move to the right child. We repeat this process until we find the node with the given key or reach a leaf node.</p></li></ol><h2 id="Rust-Code-for-Red-Black-Trees"><a href="#Rust-Code-for-Red-Black-Trees" class="headerlink" title="Rust Code for Red-Black Trees"></a>Rust Code for Red-Black Trees</h2><p>To implement Red-Black Trees in Rust, we first define a Node struct to represent each node in the tree. The Node struct contains fields for the node’s key, value, color, and left and right children.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    Red,</span><br><span class="line">    Black,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">    key: K,</span><br><span class="line">    value: V,</span><br><span class="line">    color: Color,</span><br><span class="line">    left: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">    right: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We also define an RBTree struct to represent the Red-Black Tree as a whole. The RBTree struct contains a root node and methods to insert, delete, and search for elements in the tree.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">RBTree</span>&lt;K: <span class="built_in">Ord</span>, V&gt; &#123;</span><br><span class="line">    root: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Left-and-Right-Rotate"><a href="#Left-and-Right-Rotate" class="headerlink" title="Left and Right Rotate"></a>Left and Right Rotate</h3><p>These functions perform a left or right rotation of a given node and its children. The rotate_left function takes in a mutable reference to a node and rotates its right child to the left, while the rotate_right function takes in a mutable reference to a node and rotates its left child to the right.</p><p>During each rotation, the appropriate pointers are updated to reflect the new structure of the tree. The size of each node is also updated to reflect any changes that occurred during the rotation.</p><p>These rotation functions are used by the fix_after_insertion and fix_after_deletion methods to maintain the balance properties of the Red-Black Tree.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;K: <span class="built_in">Ord</span>, V&gt; RBTree&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">rotate_left</span>(<span class="keyword">mut</span> node: &amp;<span class="keyword">mut</span> Node&lt;K, V&gt;) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">right</span> = node.right.<span class="title function_ invoke__">take</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        node.right = right.left.<span class="title function_ invoke__">take</span>();</span><br><span class="line">        right.left = <span class="title function_ invoke__">Some</span>(std::mem::<span class="title function_ invoke__">replace</span>(&amp;<span class="keyword">mut</span> node, right));</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">ref</span> <span class="keyword">mut</span> left) = node.left &#123;</span><br><span class="line">            left.parent = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">ref</span> <span class="keyword">mut</span> right) = node.right &#123;</span><br><span class="line">            right.parent = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">        node.<span class="title function_ invoke__">update_size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">rotate_right</span>(<span class="keyword">mut</span> node: &amp;<span class="keyword">mut</span> Node&lt;K, V&gt;) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">left</span> = node.left.<span class="title function_ invoke__">take</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        node.left = left.right.<span class="title function_ invoke__">take</span>();</span><br><span class="line">        left.right = <span class="title function_ invoke__">Some</span>(std::mem::<span class="title function_ invoke__">replace</span>(&amp;<span class="keyword">mut</span> node, left));</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">ref</span> <span class="keyword">mut</span> left) = node.left &#123;</span><br><span class="line">            left.parent = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">ref</span> <span class="keyword">mut</span> right) = node.right &#123;</span><br><span class="line">            right.parent = <span class="title function_ invoke__">Some</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">        node.<span class="title function_ invoke__">update_size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Insertion-Function-in-Rust"><a href="#Insertion-Function-in-Rust" class="headerlink" title="Insertion Function in Rust"></a>Insertion Function in Rust</h3><p>The insert function in Rust follows the same logic as the insertion function described earlier. We create a new node with the given key and value and traverse the tree to find the correct location to insert the new node. If the tree is empty, we simply make the new node the root of the tree. If the tree is not empty, we compare the new node’s key to the key of the current node we are examining. If the new node’s key is less than the current node’s key, we move to the left child of the current node. If the new node’s key is greater than the current node’s key, we move to the right child of the current node. We repeat this process until we find an empty location in the tree where we can insert the new node.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;K: <span class="built_in">Ord</span>, V&gt; RBTree&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fix_after_insertion</span>(</span><br><span class="line">        <span class="keyword">mut</span> node: &amp;<span class="keyword">mut</span> Node&lt;K, V&gt;,</span><br><span class="line">        root: <span class="type">Option</span>&lt;&amp;<span class="keyword">mut</span> <span class="type">Box</span>&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">    ) &#123;</span><br><span class="line">        node.color = Color::Red;</span><br><span class="line">        <span class="keyword">while</span> node != root.<span class="title function_ invoke__">unwrap</span>() &amp;&amp; node.<span class="title function_ invoke__">parent</span>().<span class="title function_ invoke__">unwrap</span>().color == Color::Red &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">parent</span> = node.<span class="title function_ invoke__">parent</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">grandparent</span> = node.<span class="title function_ invoke__">grandparent</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">if</span> parent == grandparent.left.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>() &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">uncle</span> = grandparent.right.<span class="title function_ invoke__">as_ref</span>();</span><br><span class="line">                <span class="keyword">if</span> uncle.<span class="title function_ invoke__">is_some</span>() &amp;&amp; uncle.<span class="title function_ invoke__">unwrap</span>().color == Color::Red &#123;</span><br><span class="line">                    parent.color = Color::Black;</span><br><span class="line">                    uncle.<span class="title function_ invoke__">unwrap</span>().color = Color::Black;</span><br><span class="line">                    grandparent.color = Color::Red;</span><br><span class="line">                    node = grandparent;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> node == parent.right.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>() &#123;</span><br><span class="line">                        node = parent;</span><br><span class="line">                        RBTree::<span class="title function_ invoke__">rotate_left</span>(parent);</span><br><span class="line">                    &#125;</span><br><span class="line">                    parent.color = Color::Black;</span><br><span class="line">                    grandparent.color = Color::Red;</span><br><span class="line">                    RBTree::<span class="title function_ invoke__">rotate_right</span>(grandparent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">uncle</span> = grandparent.left.<span class="title function_ invoke__">as_ref</span>();</span><br><span class="line">                <span class="keyword">if</span> uncle.<span class="title function_ invoke__">is_some</span>() &amp;&amp; uncle.<span class="title function_ invoke__">unwrap</span>().color == Color::Red &#123;</span><br><span class="line">                    parent.color = Color::Black;</span><br><span class="line">                    uncle.<span class="title function_ invoke__">unwrap</span>().color = Color::Black;</span><br><span class="line">                    grandparent.color = Color::Red;</span><br><span class="line">                    node = grandparent;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> node == parent.left.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>() &#123;</span><br><span class="line">                        node = parent;</span><br><span class="line">                        RBTree::<span class="title function_ invoke__">rotate_right</span>(parent);</span><br><span class="line">                    &#125;</span><br><span class="line">                    parent.color = Color::Black;</span><br><span class="line">                    grandparent.color = Color::Red;</span><br><span class="line">                    RBTree::<span class="title function_ invoke__">rotate_left</span>(grandparent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root.<span class="title function_ invoke__">unwrap</span>().color = Color::Black;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;K: <span class="built_in">Ord</span>, V&gt; RBTree&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">insert</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, key: K, value: V) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">new_node</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(Node &#123;</span><br><span class="line">            key,</span><br><span class="line">            value,</span><br><span class="line">            color: Color::Red,</span><br><span class="line">            left: <span class="literal">None</span>,</span><br><span class="line">            right: <span class="literal">None</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">ref</span> <span class="keyword">mut</span> root) = <span class="keyword">self</span>.root &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current</span> = root.<span class="title function_ invoke__">as_mut</span>();</span><br><span class="line">            <span class="keyword">loop</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> new_node.key &lt; current.key &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">ref</span> <span class="keyword">mut</span> left) = current.left &#123;</span><br><span class="line">                        current = left.<span class="title function_ invoke__">as_mut</span>();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        current.left = <span class="title function_ invoke__">Some</span>(new_node);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> new_node.key &gt; current.key &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">ref</span> <span class="keyword">mut</span> right) = current.right &#123;</span><br><span class="line">                        current = right.<span class="title function_ invoke__">as_mut</span>();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        current.right = <span class="title function_ invoke__">Some</span>(new_node);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    current.value = new_node.value;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            RBTree::<span class="title function_ invoke__">fix_after_insertion</span>(current, <span class="title function_ invoke__">Some</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>.root));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            new_node.color = Color::Black;</span><br><span class="line">            <span class="keyword">self</span>.root = <span class="title function_ invoke__">Some</span>(new_node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Deletion-Function-in-Rust"><a href="#Deletion-Function-in-Rust" class="headerlink" title="Deletion Function in Rust"></a>Deletion Function in Rust</h3><p>The delete function in Rust also follows the same logic as the deletion function described earlier. We search for the node with the given key and replace it with its successor, which is the node with the smallest key in the node’s right subtree. We then delete the successor node from the tree using a similar process.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;K: <span class="built_in">Ord</span>, V&gt; RBTree&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fix_after_deletion</span>(</span><br><span class="line">        <span class="keyword">mut</span> node: &amp;<span class="keyword">mut</span> Node&lt;K, V&gt;,</span><br><span class="line">        root: <span class="type">Option</span>&lt;&amp;<span class="keyword">mut</span> <span class="type">Box</span>&lt;Node&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">while</span> node != root.<span class="title function_ invoke__">unwrap</span>() &amp;&amp; node.color == Color::Black &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">parent</span> = node.<span class="title function_ invoke__">parent_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">sibling</span> = node.<span class="title function_ invoke__">sibling</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">if</span> sibling.color == Color::Red &#123;</span><br><span class="line">                sibling.color = Color::Black;</span><br><span class="line">                parent.color = Color::Red;</span><br><span class="line">                <span class="keyword">if</span> node.<span class="title function_ invoke__">is_left_child</span>() &#123;</span><br><span class="line">                    RBTree::<span class="title function_ invoke__">rotate_left</span>(parent);</span><br><span class="line">                    sibling.color = parent.right.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>().color;</span><br><span class="line">                    parent.right.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().color = Color::Black;</span><br><span class="line">                    node = parent.left.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    RBTree::<span class="title function_ invoke__">rotate_right</span>(parent);</span><br><span class="line">                    sibling.color = parent.left.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>().color;</span><br><span class="line">                    parent.left.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().color = Color::Black;</span><br><span class="line">                    node = parent.right.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> (<span class="title function_ invoke__">Some</span>(left), <span class="title function_ invoke__">Some</span>(right)) = (sibling.left.<span class="title function_ invoke__">as_ref</span>(), sibling.right.<span class="title function_ invoke__">as_ref</span>()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> left.color == Color::Black &amp;&amp; right.color == Color::Black &#123;</span><br><span class="line">                        sibling.color = Color::Red;</span><br><span class="line">                        node = parent;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> node.<span class="title function_ invoke__">is_left_child</span>() &amp;&amp; right.color == Color::Black &#123;</span><br><span class="line">                            sibling.color = Color::Red;</span><br><span class="line">                            left.color = Color::Black;</span><br><span class="line">                            RBTree::<span class="title function_ invoke__">rotate_right</span>(sibling);</span><br><span class="line">                            sibling = parent.right.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> node.<span class="title function_ invoke__">is_right_child</span>() &amp;&amp; left.color == Color::Black &#123;</span><br><span class="line">                            sibling.color = Color::Red;</span><br><span class="line">                            right.color = Color::Black;</span><br><span class="line">                            RBTree::<span class="title function_ invoke__">rotate_left</span>(sibling);</span><br><span class="line">                            sibling = parent.left.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        sibling.color = parent.color;</span><br><span class="line">                        parent.color = Color::Black;</span><br><span class="line">                        <span class="keyword">if</span> node.<span class="title function_ invoke__">is_left_child</span>() &#123;</span><br><span class="line">                            right.color = Color::Black;</span><br><span class="line">                            RBTree::<span class="title function_ invoke__">rotate_left</span>(parent);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            left.color = Color::Black;</span><br><span class="line">                            RBTree::<span class="title function_ invoke__">rotate_right</span>(parent);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(left) = sibling.left.<span class="title function_ invoke__">as_ref</span>() &#123;</span><br><span class="line">                        <span class="keyword">if</span> node.<span class="title function_ invoke__">is_left_child</span>() &#123;</span><br><span class="line">                            left.color = Color::Black;</span><br><span class="line">                            sibling.color = parent.color;</span><br><span class="line">                            RBTree::<span class="title function_ invoke__">rotate_right</span>(parent);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            left.color = Color::Red;</span><br><span class="line">                            RBTree::<span class="title function_ invoke__">rotate_right</span>(sibling);</span><br><span class="line">                            sibling = parent.right.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> node.<span class="title function_ invoke__">is_left_child</span>() &#123;</span><br><span class="line">                            sibling.color = Color::Red;</span><br><span class="line">                            RBTree::<span class="title function_ invoke__">rotate_right</span>(sibling);</span><br><span class="line">                            sibling = parent.right.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            sibling.color = parent.color;</span><br><span class="line">                            parent.color = Color::Black;</span><br><span class="line">                            RBTree::<span class="title function_ invoke__">rotate_left</span>(parent);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.color = Color::Black;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;K: <span class="built_in">Ord</span>, V&gt; RBTree&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">delete</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, key: &amp;K) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;V&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current</span> = <span class="keyword">self</span>.root.<span class="title function_ invoke__">as_mut</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(node) = current &#123;</span><br><span class="line">            <span class="keyword">if</span> key &lt; &amp;node.key &#123;</span><br><span class="line">                current = node.left.<span class="title function_ invoke__">as_mut</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> key &gt; &amp;node.key &#123;</span><br><span class="line">                current = node.right.<span class="title function_ invoke__">as_mut</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> node.left.<span class="title function_ invoke__">is_some</span>() &amp;&amp; node.right.<span class="title function_ invoke__">is_some</span>() &#123;</span><br><span class="line">                    <span class="keyword">let</span> <span class="variable">successor</span> = node.right.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">min_node</span>();</span><br><span class="line">                    node.key = successor.key;</span><br><span class="line">                    node.value = std::mem::<span class="title function_ invoke__">replace</span>(&amp;<span class="keyword">mut</span> successor.value, <span class="built_in">Default</span>::<span class="title function_ invoke__">default</span>());</span><br><span class="line">                    current = <span class="title function_ invoke__">Some</span>(&amp;<span class="keyword">mut</span> *successor);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">child</span> = <span class="keyword">if</span> node.left.<span class="title function_ invoke__">is_some</span>() &#123;</span><br><span class="line">                    node.left.<span class="title function_ invoke__">take</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node.right.<span class="title function_ invoke__">take</span>()</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> node.color == Color::Black &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="keyword">ref</span> c) = child &#123;</span><br><span class="line">                        RBTree::<span class="title function_ invoke__">fix_after_deletion</span>(c.<span class="title function_ invoke__">as_mut</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>.root));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        RBTree::<span class="title function_ invoke__">fix_after_deletion</span>(node, <span class="title function_ invoke__">Some</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>.root));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">Some</span>(node.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="literal">None</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Searching-Function-in-Rust"><a href="#Searching-Function-in-Rust" class="headerlink" title="Searching Function in Rust"></a>Searching Function in Rust</h3><p>The <code>search</code> function in Rust is also similar to the search function described earlier. We start at the root node and compare the given key with the key of the current node. If the keys are equal, we return the value of the current node. If the given key is less than the key of the current node, we move to the left child. If the given key is greater than the key of the current node, we move to the right child. We repeat this process until we find the node with the given key or reach a leaf node.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;K: <span class="built_in">Ord</span>, V&gt; RBTree&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search</span>(&amp;<span class="keyword">self</span>, key: &amp;K) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;V&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">current</span> = <span class="keyword">self</span>.root.<span class="title function_ invoke__">as_ref</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(node) = current &#123;</span><br><span class="line">            <span class="keyword">if</span> key == &amp;node.key &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">Some</span>(&amp;node.value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> key &lt; &amp;node.key &#123;</span><br><span class="line">                current = node.left.<span class="title function_ invoke__">as_ref</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = node.right.<span class="title function_ invoke__">as_ref</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Red-Black Trees are a type of self-balancing binary search tree that are used to store and retrieve elements in sorted order with O(log n) time complexity for all major operations. They are designed to be memory efficient and balanced, making them more efficient than other balanced trees like AVL trees. Rust is a modern programming language that is designed for performance and safety, making it a great choice for implementing data structures like the Red-Black Tree.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;In computer science, Red-Black Trees are a typ</summary>
      
    
    
    
    <category term="data structure &amp; algorithm" scheme="http://example.com/categories/data-structure-algorithm/"/>
    
    
    <category term="data structure" scheme="http://example.com/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>Self Description</title>
    <link href="http://example.com/2023/02/13/SelfDescription/"/>
    <id>http://example.com/2023/02/13/SelfDescription/</id>
    <published>2023-02-13T08:26:01.000Z</published>
    <updated>2023-03-21T15:53:50.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nice-to-meet-you"><a href="#Nice-to-meet-you" class="headerlink" title="Nice to meet you"></a>Nice to meet you</h2><ul><li>Im LightString. A CS major student in UW-madison. Welcome to my blog!</li><li>My birthday is June 1st. Happy children’s day!</li><li>ACG lover, Dark Soul player, Galgame lover, and so on.</li></ul><h2 id="Field-I-interested-in"><a href="#Field-I-interested-in" class="headerlink" title="Field I interested in"></a>Field I interested in</h2><ul><li>Machine Learning &amp; Deep Learning</li><li>Algorithms &amp; Data Structures</li><li>Quantitive Trading</li><li>…………</li></ul><h2 id="Contact"><a href="#Contact" class="headerlink" title="Contact"></a>Contact</h2><ul><li>Email Address: <a href="mailto:&#108;&#115;&#x2e;&#104;&#x79;&#x6a;&#x69;&#x6e;&#x67;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;">&#108;&#115;&#x2e;&#104;&#x79;&#x6a;&#x69;&#x6e;&#x67;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a></li><li>School Email Address: <a href="mailto:&#104;&#106;&#105;&#x6e;&#x67;&#55;&#64;&#x77;&#105;&#115;&#x63;&#x2e;&#101;&#x64;&#x75;">&#104;&#106;&#105;&#x6e;&#x67;&#55;&#64;&#x77;&#105;&#115;&#x63;&#x2e;&#101;&#x64;&#x75;</a></li><li>Phone Number: (+1)9294269451 | (+86)13376173601</li><li>QQ id: 2595635885</li><li>Github: <a href="https://github.com/dawn-cmd?tab=repositories">dawn-cmd</a></li><li>StackOverflow: <a href="https://stackoverflow.com/users/20873696/lightstring">LightString</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Nice-to-meet-you&quot;&gt;&lt;a href=&quot;#Nice-to-meet-you&quot; class=&quot;headerlink&quot; title=&quot;Nice to meet you&quot;&gt;&lt;/a&gt;Nice to meet you&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Im Light</summary>
      
    
    
    
    
  </entry>
  
</feed>
