{"pages":[{"title":"","date":"2024-02-06T03:22:52.294Z","path":"about/index.html","text":"HuaiYuan JingNice to meet you Hi, I am HuaiYuan Jing, a sophomore student at the University of Wisconsin Madison, studying Computer Science and Math at the College of Letters and Science. Originally from Jiangsu, China. My path of computer science started since I was in middle school, and I attended CS competitions for several years. And I am still attending International Collegiate Programming Contest (ICPC) and many other programming competitions and got 9th, 13th place in ICPC in past few years. My development toolkit is rich with languages like C++, Rust, and Python, which I use for a broad range of projects. When it comes to game development, C# is my go-to language for crafting experiences in Unity. My technical interests are diverse, with a keen focus on Operating System (OS) and Artificial Intelligence (AI) development. Noteworthy projects, such as the rCore OS project and an AI sensor fusion project, showcase my work and can be explored in my GitHub repositories. I love boxing, brazilian-jiujitsu, and video games. Achievements 13th, 9th place, ICPC Google TensorFlow Developer Certification Contact Email Address: ls.hyjing@gmail.com Phone Number: (+1)9294269451 | (+86)13376173601 Github: https://github.com/dawn-cmd"},{"title":"tags","date":"2024-02-02T23:00:31.000Z","path":"tags/index.html","text":""}],"posts":[{"title":"Solution of Cantina of Babel","date":"2024-02-11T23:08:33.000Z","path":"2024/02/11/Solution-of-Cantina-of-Babel/","text":"Problem Descriptionlink Problem AnalysisWe can divide all people into different sets based on the languages they understand and speak. Everyone in a set can communicate with others in the same set—that is, they can understand the languages spoken by each other. Finally, we subtract the number of people in the largest set from the total number of people, which gives us the minimum number of people that need to be excluded. Step 1: Convert Strings to IDsAll the information provided in the input appears in string form, which is extremely inconvenient for graph construction and traversal. Therefore, we first record strings and assign corresponding IDs using a dictionary and an array. 1234567891011121314151617181920212223242526272829fn build_language_dict(people: &amp;Vec&lt;Person&gt;) -&gt; HashMap&lt;&amp;String, usize&gt; &#123; let mut lang_dict = HashMap::new(); let mut num_of_lang = 0usize; for person in people &#123; for lang in person.understand.borrow() &#123; if lang_dict.contains_key(lang) &#123; continue; &#125; lang_dict.insert(lang, num_of_lang); num_of_lang += 1; &#125; &#125; lang_dict&#125;fn record_people(n: usize) -&gt; Vec&lt;Person&gt; &#123; let mut people: Vec&lt;Person&gt; = vec![]; for _ in 0..n &#123; let input = read_line_of_string(); people.push(Person &#123; speak: input[1].to_owned(), understand: HashSet::new(), &#125;); let id = people.len() - 1; for i in 1..input.len() &#123; people[id].understand.insert(input[i].clone()); &#125; &#125; people&#125; The record_people function records each line of input, then converts them into Person structs and stores them in the people array, allowing direct access to each person via their ID later. The build_language_dict function creates a HashMap with String keys and usize values, enabling us to find the corresponding value by language name. After converting all strings to IDs, we can begin constructing the graph. Step 2: Construct the Language Conversion GraphFor each person, they can convert the languages they understand to the language they speak. This is equivalent to drawing a directed edge from the understood language to the spoken language. By traversing each person in this way, we can build a graph of language conversion. 12345678910111213141516fn build_lang_graph(people: &amp;Vec&lt;Person&gt;, lang_dict: &amp;HashMap&lt;&amp;String, usize&gt;) -&gt; Vec&lt;Vec&lt;usize&gt;&gt; &#123; let mut lang_graph: Vec&lt;Vec&lt;usize&gt;&gt; = vec![vec![]; lang_dict.len()]; for person in people &#123; for lang in person.understand.borrow() &#123; if *lang == person.speak &#123; continue; &#125; lang_graph[lang_dict[lang]].push(lang_dict[&amp;person.speak]); &#125; &#125; for i in 0..lang_graph.len() &#123; let tmp: HashSet&lt;_&gt; = lang_graph[i].drain(..).collect(); lang_graph[i].extend(tmp.into_iter()); &#125; lang_graph&#125; The function’s end uses a HashSet for edge deduplication. Values in the array are placed into a HashSet and then back into the array to achieve deduplication. Step 3: Verify Two People Can CommunicateAfter the language graph is established, a function is needed to verify whether two people can understand each other’s spoken languages. If one person’s spoken language can be converted into one of the languages the other person understands, then it can be said that the second person can understand the first person’s speech, and vice versa. This is implemented using a naive DFS algorithm. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950fn test_connected_dfs( cur: usize, target: &amp;HashSet&lt;usize&gt;, lang_graph: &amp;Vec&lt;Vec&lt;usize&gt;&gt;, visited: &amp;mut Vec&lt;bool&gt;,) -&gt; bool &#123; if target.contains(&amp;cur) &#123; return true; &#125; visited[cur] = true; for next in &amp;lang_graph[cur] &#123; if visited[*next] &#123; continue; &#125; if test_connected_dfs(*next, target, lang_graph, visited) &#123; return true; &#125; &#125; false&#125;fn test_biconnected( a: &amp;Person, b: &amp;Person, lang_graph: &amp;Vec&lt;Vec&lt;usize&gt;&gt;, lang_dict: &amp;HashMap&lt;&amp;String, usize&gt;,) -&gt; bool &#123; let mut visited = vec![false; lang_graph.len()]; let target: HashSet&lt;usize&gt; = b .understand .borrow() .into_iter() .map(|s| lang_dict[s]) .collect(); if !test_connected_dfs(lang_dict[&amp;a.speak], &amp;target, lang_graph, &amp;mut visited) &#123; return false; &#125; visited = vec![false; lang_graph.len()]; let target: HashSet&lt;usize&gt; = a .understand .borrow() .into_iter() .map(|s| lang_dict[s]) .collect(); if !test_connected_dfs(lang_dict[&amp;b.speak], &amp;target, lang_graph, &amp;mut visited) &#123; return false; &#125; true&#125; The test_biconnected function encapsulates test_connected_dfs. By calling this subfunction twice, it verifies whether two people can communicate. Step 4: Construct a Disjoint Set UnionWhen analyzing the relationships between each person, a disjoint set union (DSU) data structure is used for organization. Everyone in a DSU can communicate with each other, and if two people from different DSUs can communicate, those DSUs are merged. 12345678910111213141516171819202122232425262728293031323334struct DisjointSetUnion &#123; fa: Vec&lt;usize&gt;,&#125;impl DisjointSetUnion &#123; fn get_fa(&amp;mut self, cur: usize) -&gt; usize &#123; if self.fa[cur] == cur &#123; return cur; &#125; let tmp = self.fa[cur]; self.fa[cur] = self.get_fa(tmp); self.fa[cur] &#125;&#125;fn build_people_disjoint_set_union( people: &amp;Vec&lt;Person&gt;, lang_graph: &amp;Vec&lt;Vec&lt;usize&gt;&gt;, lang_dict: &amp;HashMap&lt;&amp;String, usize&gt;,) -&gt; DisjointSetUnion &#123; let mut people_disjoint_set_union = DisjointSetUnion &#123; fa: (0..people.len()).into_iter().collect(), &#125;; for i in 0..people.len() &#123; for j in i + 1..people.len() &#123; if people_disjoint_set_union.get_fa(i) == people_disjoint_set_union.get_fa(j) || !test_biconnected(&amp;people[i], &amp;people[j], lang_graph, lang_dict) &#123; continue; &#125; let tmp = people_disjoint_set_union.get_fa(i); people_disjoint_set_union.fa[tmp] = people_disjoint_set_union.get_fa(j); &#125; &#125; people_disjoint_set_union&#125; Path compression is used in the DSU implementation. Each call to get_fa updates the node’s parent to the root node of the set, thereby flattening the DSU and optimizing query efficiency. Step 5: Obtain the Largest DSU CountAn array records the count of each DSU, and each node’s DSU is identified using get_fa, updating the count accordingly. The function returns the count of the largest DSU. 1234567891011121314151617impl DisjointSetUnion &#123; fn get_fa(&amp;mut self, cur: usize) -&gt; usize &#123; if self.fa[cur] == cur &#123; return cur; &#125; let tmp = self.fa[cur]; self.fa[cur] = self.get_fa(tmp); self.fa[cur] &#125; fn get_largest_set(&amp;mut self) -&gt; usize &#123; let mut num_of_set = vec![0usize; self.fa.len()]; for i in 0..self.fa.len() &#123; num_of_set[self.get_fa(i)] += 1; &#125; *num_of_set.iter().max().unwrap() &#125;&#125; Step 6: Integrate and Return the AnswerArrange all subfunctions in the main function and print the value of n - people_disjoint_set_union.get_largest_set() as the result. 123456789fn main() &#123; let n = read_line_of_i32()[0] as usize; let people = record_people(n); let lang_dict = build_language_dict(&amp;people); let lang_graph = build_lang_graph(&amp;people, &amp;lang_dict); let mut people_disjoint_set_union = build_people_disjoint_set_union(&amp;people, &amp;lang_graph, &amp;lang_dict); println!(&quot;&#123;&#125;&quot;, n - people_disjoint_set_union.get_largest_set());&#125; Conclusion: Complete CodeThe provided code demonstrates a method for solving the problem by dividing people into sets based on language understanding and speaking, using data structures and algorithms such as hash maps, graphs, DFS, and disjoint set unions to efficiently find the minimum number of people that need to be excluded to allow for universal communication within the remaining group. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172use std::&#123; borrow::Borrow, collections::&#123;HashMap, HashSet&#125;,&#125;;struct Person &#123; speak: String, understand: HashSet&lt;String&gt;,&#125;struct DisjointSetUnion &#123; fa: Vec&lt;usize&gt;,&#125;impl DisjointSetUnion &#123; fn get_fa(&amp;mut self, cur: usize) -&gt; usize &#123; if self.fa[cur] == cur &#123; return cur; &#125; let tmp = self.fa[cur]; self.fa[cur] = self.get_fa(tmp); self.fa[cur] &#125; fn get_largest_set(&amp;mut self) -&gt; usize &#123; let mut num_of_set = vec![0usize; self.fa.len()]; for i in 0..self.fa.len() &#123; num_of_set[self.get_fa(i)] += 1; &#125; *num_of_set.iter().max().unwrap() &#125;&#125;fn main() &#123; let n = read_line_of_i32()[0] as usize; let people = record_people(n); let lang_dict = build_language_dict(&amp;people); let lang_graph = build_lang_graph(&amp;people, &amp;lang_dict); let mut people_disjoint_set_union = build_people_disjoint_set_union(&amp;people, &amp;lang_graph, &amp;lang_dict); println!(&quot;&#123;&#125;&quot;, n - people_disjoint_set_union.get_largest_set());&#125;fn build_people_disjoint_set_union( people: &amp;Vec&lt;Person&gt;, lang_graph: &amp;Vec&lt;Vec&lt;usize&gt;&gt;, lang_dict: &amp;HashMap&lt;&amp;String, usize&gt;,) -&gt; DisjointSetUnion &#123; let mut people_disjoint_set_union = DisjointSetUnion &#123; fa: (0..people.len()).into_iter().collect(), &#125;; for i in 0..people.len() &#123; for j in i + 1..people.len() &#123; if people_disjoint_set_union.get_fa(i) == people_disjoint_set_union.get_fa(j) || !test_biconnected(&amp;people[i], &amp;people[j], lang_graph, lang_dict) &#123; continue; &#125; let tmp = people_disjoint_set_union.get_fa(i); people_disjoint_set_union.fa[tmp] = people_disjoint_set_union.get_fa(j); &#125; &#125; people_disjoint_set_union&#125;fn test_connected_dfs( cur: usize, target: &amp;HashSet&lt;usize&gt;, lang_graph: &amp;Vec&lt;Vec&lt;usize&gt;&gt;, visited: &amp;mut Vec&lt;bool&gt;,) -&gt; bool &#123; if target.contains(&amp;cur) &#123; return true; &#125; visited[cur] = true; for next in &amp;lang_graph[cur] &#123; if visited[*next] &#123; continue; &#125; if test_connected_dfs(*next, target, lang_graph, visited) &#123; return true; &#125; &#125; false&#125;fn test_biconnected( a: &amp;Person, b: &amp;Person, lang_graph: &amp;Vec&lt;Vec&lt;usize&gt;&gt;, lang_dict: &amp;HashMap&lt;&amp;String, usize&gt;,) -&gt; bool &#123; let mut visited = vec![false; lang_graph.len()]; let target: HashSet&lt;usize&gt; = b .understand .borrow() .into_iter() .map(|s| lang_dict[s]) .collect(); if !test_connected_dfs(lang_dict[&amp;a.speak], &amp;target, lang_graph, &amp;mut visited) &#123; return false; &#125; visited = vec![false; lang_graph.len()]; let target: HashSet&lt;usize&gt; = a .understand .borrow() .into_iter() .map(|s| lang_dict[s]) .collect(); if !test_connected_dfs(lang_dict[&amp;b.speak], &amp;target, lang_graph, &amp;mut visited) &#123; return false; &#125; true&#125;fn build_lang_graph(people: &amp;Vec&lt;Person&gt;, lang_dict: &amp;HashMap&lt;&amp;String, usize&gt;) -&gt; Vec&lt;Vec&lt;usize&gt;&gt; &#123; let mut lang_graph: Vec&lt;Vec&lt;usize&gt;&gt; = vec![vec![]; lang_dict.len()]; for person in people &#123; for lang in person.understand.borrow() &#123; if *lang == person.speak &#123; continue; &#125; lang_graph[lang_dict[lang]].push(lang_dict[&amp;person.speak]); &#125; &#125; for i in 0..lang_graph.len() &#123; let tmp: HashSet&lt;_&gt; = lang_graph[i].drain(..).collect(); lang_graph[i].extend(tmp.into_iter()); &#125; lang_graph&#125;fn build_language_dict(people: &amp;Vec&lt;Person&gt;) -&gt; HashMap&lt;&amp;String, usize&gt; &#123; let mut lang_dict = HashMap::new(); let mut num_of_lang = 0usize; for person in people &#123; for lang in person.understand.borrow() &#123; if lang_dict.contains_key(lang) &#123; continue; &#125; lang_dict.insert(lang, num_of_lang); num_of_lang += 1; &#125; &#125; lang_dict&#125;fn record_people(n: usize) -&gt; Vec&lt;Person&gt; &#123; let mut people: Vec&lt;Person&gt; = vec![]; for _ in 0..n &#123; let input = read_line_of_string(); // println!(&quot;&#123;:?&#125;&quot;, input); people.push(Person &#123; speak: input[1].to_owned(), understand: HashSet::new(), &#125;); let id = people.len() - 1; for i in 1..input.len() &#123; people[id].understand.insert(input[i].clone()); &#125; &#125; people&#125;fn read_line_of_i32() -&gt; Vec&lt;i32&gt; &#123; let mut buffer = String::new(); let _ = std::io::stdin().read_line(&amp;mut buffer); buffer .trim() .to_owned() .split(&quot; &quot;) .map(|x| x.to_owned().parse::&lt;i32&gt;().unwrap()) .collect()&#125;fn read_line_of_string() -&gt; Vec&lt;String&gt; &#123; let mut buffer = String::new(); let _ = std::io::stdin().read_line(&amp;mut buffer); buffer .trim() .to_owned() .split(&quot; &quot;) .map(|x| x.to_owned()) .collect()&#125;","tags":[{"name":"ICPC","slug":"ICPC","permalink":"https://dawn-cmd.github.io/tags/ICPC/"},{"name":"DFS","slug":"DFS","permalink":"https://dawn-cmd.github.io/tags/DFS/"},{"name":"Disjoint Union Set","slug":"Disjoint-Union-Set","permalink":"https://dawn-cmd.github.io/tags/Disjoint-Union-Set/"},{"name":"Kattis","slug":"Kattis","permalink":"https://dawn-cmd.github.io/tags/Kattis/"},{"name":"Connective","slug":"Connective","permalink":"https://dawn-cmd.github.io/tags/Connective/"},{"name":"Rust","slug":"Rust","permalink":"https://dawn-cmd.github.io/tags/Rust/"}],"categories":[]},{"title":"First Step of Dynamic Programming: From Fibonacci to Matrix Acceleration","date":"2024-02-02T23:24:37.000Z","path":"2024/02/02/First-Step-of-Dynamic-Programming-From-Fibonacci-to-Matrix-Acceleration/","text":"Dynamic Programming In both contexts it refers to simplifying a complicated problem by breaking it down into simpler sub-problems in a recursive manner. While some decision problems cannot be taken apart this way, decisions that span several points in time do often break apart recursively. Likewise, in computer science, if a problem can be solved optimally by breaking it into sub-problems and then recursively finding the optimal solutions to the sub-problems, then it is said to have optimal substructure.If sub-problems can be nested recursively inside larger problems, so that dynamic programming methods are applicable, then there is a relation between the value of the larger problem and the values of the sub-problems. In the optimization literature this relationship is called the Bellman equation. –Wikipedia I’m not sure how much you understood from Wikipedia’s description, but I think starting with a simple example would be better. The Fibonacci Sequence: A Gateway to Dynamic ProgrammingAt its core, the Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. Mathematically, it’s defined as: $$F_i &#x3D; F_{i-1} + F_{i-2} (i &gt;&#x3D; 2)\\F_1 &#x3D; 1, F_0 &#x3D; 0$$ This simple formula lays the foundation for understanding the three pillars of dynamic programming: State, State Transition Equation, Boundary StateIn dynamic programming, the ‘state’ encapsulates the current situation in our problem-solving context. For the Fibonacci sequence, the state is represented by $F_i$, indicating the i-th number in the sequence. Understanding the state is crucial because it defines what we’re trying to compute. State Transition EquationThe state transition equation describes how to transition from one state to the next. For the Fibonacci sequence, this is given by $F_i &#x3D; F_{i-1} + F_{i-2}$. It shows how the current state (F_i) is derived from the previous two states ($F_{i-1}$ and $F_{i-2}$). This equation is the heart of dynamic programming, guiding how we break down problems into smaller, manageable pieces. BoundaryBoundary conditions provide the starting points or base cases for our computation. For the Fibonacci sequence, these are $F_1$ &#x3D; 1 and $F_0$ &#x3D; 0. They’re essential because they prevent infinite recursion and ensure that our dynamic programming algorithm has a clear and definitive starting point. Concepts end here. Let’s start to code. Implementation of Fibonacci Sequence1234567def main(): n = int(input()) fib = [0] * (n + 2) fib[1] = 1 for i in range(2, n + 2): fib[i] = fib[i - 1] + fib[i - 2] print(fib[n]) Here, we’ve crafted a function named main that computes the nth Fibonacci number. This function prompts for an input, n, and initializes an array fib with a length of n + 2 (extra two is just for safety) to store the Fibonacci sequence. It sets the second element (index 1) to 1, reflecting the sequence’s start. Through a loop, it then calculates each Fibonacci number by summing the two preceding numbers and stores them in the array. Finally, it prints the nth Fibonacci number. Let’s execute this function: 123359227465Execution time: 1.889999839477241e-05 seconds We’ve successfully solved our first dynamic programming problem with this implementation. However, the code can be streamlined for better readability. Let’s work on making it more intuitive. Implement Fibonacci Recursively123456def fib(i): return i if i &lt; 2 else fib(i - 1) + fib(i - 2)def main(): n = int(input()) print(fib(n)) This recursive implementation is more intuitive and direct, using just a single line of code to define the Fibonacci computation. Let’s execute this function: 123359227465The fib function took 2.1213817596435547 seconds to execute. Okay, everything looks fine… Really?Let’s see the third line of output. 1The fib function took 2.1213817596435547 seconds to execute. The function runs extremely slow. What happened there? Let’s check how many times does function fib() be called. 1234359227465The fib function took 3.8617589473724365 seconds to execute.The fib function was called 29860703 times. The observed slowdown in executing the recursive Fibonacci function, taking over 2 seconds to compute fib(35) and resulting in an astonishing 29,860,703 function calls, highlights a critical inefficiency inherent in the naive recursive approach. This inefficiency is primarily due to the excessive number of redundant calls for calculating the same Fibonacci numbers multiple times. To understand why so many calls are made, consider how the recursive function works for fib(n): it calls fib(n-1) and fib(n-2). Both of these calls then recursively invoke further fib calculations, leading to a combinatorial explosion of function calls. Many of these calls are repeated; for instance, fib(2) is calculated multiple times across different branches of the recursion tree. Memorized searchNow let’s try to solve the problem. To address this inefficiency, a technique known as memoization can be applied. Memoization is a form of caching where the results of expensive function calls are stored, so that if the same inputs occur again, the function can return the stored result instead of recalculating it. Applying memoization to the Fibonacci sequence means that once we calculate fib(n), we store its value. If fib(n) is needed again, we simply retrieve the stored value instead of recalculating it. 123456789101112131415cache = []def fib(i): global cache if cache[i] != 0: return cache[i] cache[i] = i if i &lt; 2 else fib(i - 1) + fib(i - 2) return cache[i]def main(): global cache n = int(input()) cache = [0] * (n + 1) result = fib(n) print(result) Let’s run and check the performance. 123359227465The fib function took 1.539999993838137e-05 seconds to execute. This performance boost is due to the drastic reduction in the number of calls to the fib function, as each Fibonacci number is calculated only once. Now it has the same runtime as the method use array. But can we make it better? Rolling arrayLet’s revisit our initial dynamic programming approach to computing the nth Fibonacci number. In this version, we allocate an array large enough to hold all Fibonacci numbers up to n. However, we notice a key optimization point: to calculate any Fibonacci number, we only ever need the last two numbers in the sequence. 1234567def main(): n = int(input()) fib = [0] * (n + 2) fib[1] = 1 for i in range(2, n + 2): fib[i] = fib[i - 1] + fib[i - 2] print(fib[n]) We can find that when we try to get n-th Fibonacci Number. It will create an array with n variables. But each time we only use fib[i],fib[i - 1], and fib[i - 2]. So we can track only these three variables. 123456789def main(): n = int(input()) fib_i = 1 fib_i_prev = 0 start_time = time.perf_counter() for i in range(2, n + 1): fib_i, fib_i_prev = fib_i + fib_i_prev, fib_i end_time = time.perf_counter() print(fib_i) By maintaining just two variables, fib_i and fib_i_prev, and updating them in each iteration, we significantly reduce the space complexity of our program to O(1), while still retaining a time complexity of O(n). This rolling array technique optimizes our solution, making it both space-efficient and fast for calculating Fibonacci numbers. But what happened if it is still too slow. Matrix AccelerationAt first glance, achieving $O(1)$ space complexity and $O(n)$ time complexity might seem like the pinnacle of optimization for any algorithm. This might lead one to prematurely conclude that there’s no further scope for enhancement. However, this article aims to challenge that notion by introducing a mathematical strategy capable of significantly boosting our program’s efficiency, especially for large-scale problems. 123100000000908460138Execution time: 10.320621700004267 seconds Consider when n scales to $10 ^ 8$. At this magnitude, an algorithm with $O(n)$ time complexity begins to show its limitations, as evidenced by an execution time exceeding 10 seconds. Such scenarios demand a more sophisticated approach to reduce the computational complexity further. Understanding the Fibonacci Sequence with Matrix ExponentiationThe Fibonacci sequence is a classic example where exponential growth can cause simple recursive or iterative solutions to falter due to their linear or pseudo-linear time complexities. To compute the n-th Fibonacci number efficiently for very large n, we employ matrix exponentiation, a method that allows us to achieve a time complexity of $O(log_2{n})$. 123456789101112131415161718192021222324252627282930MOD = 1000000007def main(): n = int(input()) print(fib(n))def fib(n): if n &lt; 2: return n st = [[1, 0, 0]] update_matrix = qpow([[1, 1, 0], [1, 0, 1], [0, 0, 0]], n - 1) return matrix_multiply(st, update_matrix)[0][0] % MOD def qpow(a, n): if n == 1: return a if n % 2 == 0: return qpow(matrix_multiply(a, a), n // 2) return matrix_multiply(a, qpow(matrix_multiply(a, a), n // 2))def matrix_multiply(a, b): ans = [[0] * len(b[0]) for _ in range(len(a))] for i in range(len(a)): for j in range(len(b[0])): for k in range(len(b)): ans[i][j] += a[i][k] * b[k][j] % MOD return ansif __name__ == &quot;__main__&quot;: main() Implementation DetailsThe provided Python code showcases an efficient way to compute large Fibonacci numbers modulo MOD &#x3D; 1000000007, ensuring that the result stays within integer limits suitable for many computational environments. Matrix Power Quickening (qpow): The heart of this optimization lies in the qpow function, which implements fast exponentiation for matrices. Instead of naively multiplying the matrix n times, this function recursively squares the matrix, reducing the exponent by half each time, effectively turning the time complexity from $O(n)$ to $O(log_2{n})$. Matrix Multiplication (matrix_multiply): This function multiplies two matrices, a crucial operation in our exponentiation process. Matrix multiplication is used both in the exponentiation process and in calculating the final Fibonacci number from the base case matrix. Computing Fibonacci (fib): The fib function initializes a state matrix representing the base case of Fibonacci calculation. It then calculates the power of the transition matrix, which encodes the Fibonacci recurrence relation, using the optimized qpow method. The result is a matrix that, when multiplied by the state matrix, yields the n-th Fibonacci number. Generalization: This method is not limited to Fibonacci numbers; it can be generalized to other problems that can be expressed in terms of matrix exponentiation, showcasing the versatility of the technique.","tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://dawn-cmd.github.io/tags/Algorithm/"},{"name":"Dynamic Programming","slug":"Dynamic-Programming","permalink":"https://dawn-cmd.github.io/tags/Dynamic-Programming/"},{"name":"ICPC","slug":"ICPC","permalink":"https://dawn-cmd.github.io/tags/ICPC/"},{"name":"Recursion","slug":"Recursion","permalink":"https://dawn-cmd.github.io/tags/Recursion/"},{"name":"Matrix","slug":"Matrix","permalink":"https://dawn-cmd.github.io/tags/Matrix/"}],"categories":[]},{"title":"An Overview of a Python Script for Automated Chat Responses using OpenAI's GPT-3","date":"2023-07-26T03:54:21.000Z","path":"2023/07/25/An-Overview-of-a-Python-Script-for-Automated-Chat-Responses-using-OpenAI-s-GPT-3/","text":"AbstractionThis Python project is designed to automate chat responses in the popular messaging application, WeChat (微信), using OpenAI’s GPT-3 model. The project leverages the power of GPT-3’s language understanding capabilities to generate contextually relevant responses to incoming messages. Project DesignThe project is structured around two main functions: the GPT function, which interacts with the GPT-3 model, and the main function, which handles the user interface and message processing in WeChat. GPT FunctionThe GPT function is designed to generate responses using the GPT-3 model. It takes as input a string text representing the incoming message and a list record that maintains the conversation history. The function appends the incoming message to the conversation record, sets the OpenAI API key, and creates a completion using the OpenAI API. The completion is a response generated by the GPT-3 model based on the conversation history. The function then extracts the assistant’s message from the response, appends it to the conversation record, and returns it. 12345678910111213141516171819202122232425262728# Define a function to handle the interaction with the GPT-3 modeldef GPT(text: str, record: List[dict]) -&gt; str: # Append the user&#x27;s message to the conversation record record.append(&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: text&#125;) # Print the user&#x27;s message for debugging purposes print(text) # Set the OpenAI API key openai.api_key = apiKey # Define the model ID id = &quot;gpt-3.5-turbo&quot; # Initialize a question string with the user&#x27;s text question = &quot;###&quot; + text + &quot;###&quot; # Create a completion using the OpenAI API response = openai.ChatCompletion.create( model=id, messages=record, temperature=0.1, top_p=0.1, max_tokens=2048, ) # Extract the total token usage from the response for debugging purposes usage = response.usage[&quot;total_tokens&quot;] # Extract the content from the assistant&#x27;s message in the response response = response[&quot;choices&quot;][0][&quot;message&quot;][&quot;content&quot;] # Append the assistant&#x27;s message to the conversation record record.append(&#123;&quot;role&quot;: &quot;assistant&quot;, &quot;content&quot;: response&#125;) # Return the assistant&#x27;s response return response Main FunctionThe main function is the core of the project. It initializes the conversation with a user’s template and creates a WindowControl object for the WeChat window. It then creates a ListControl object for the chat list in the window and loads reply data from a CSV file. The function then enters a loop where it continuously checks for unread messages in the chat. When an unread message is found, it clicks on it, extracts the content of the last message, and generates a reply using the GPT function. If the conversation record has more than six messages, it trims it down to maintain a manageable size. The function then prepares the reply to be sent. If there is a reply, it sends it; if there is no reply, it sends a default message. The script is designed to handle exceptions gracefully. If an error occurs during the execution of the main function, it prints the error and breaks the loop. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455def main(): # Initialize the conversation with the user&#x27;s template mem = [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: template&#125;] try: # Create a WindowControl object for the &quot;微信&quot; window wx = WindowControl(Name=&quot;微信&quot;) print(wx) wx.SwitchToThisWindow() # Create a ListControl object for the &quot;会话&quot; list in the window chat = wx.ListControl(Name=&quot;会话&quot;) print(&quot;Find chat and combine:&quot;, chat) except Exception as e: print(f&quot;Error: &#123;e&#125;&quot;) return # Main loop while True: try: # Look for unread messages in the chat unread = chat.TextControl(searchDepth=4) # Wait until an unread message appears while not unread.Exists(0): pass print(&quot;Find unread:&quot;, unread) # If there is an unread message, click on it if not unread.Name: continue unread.Click(simulateMove=False) # Extract the content of the last message last_msg = wx.ListControl(Name=&quot;消息&quot;).GetChildren()[-1].Name print(&quot;Last message:&quot;, last_msg) # Generate a reply using the GPT-3 model reply = GPT(last_msg, mem) # If the conversation record has more than 6 messages, trim it down if len(mem) &gt; 6: mem = mem[3:] mem = [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: template&#125;] + mem print(&quot;memory size:&quot;, len(mem)) # Prepare the reply to be sent ar = [reply] # If there is a reply, send it if ar: wx.SwitchToThisWindow() wx.SendKeys(ar[0].replace( &quot;&#123;br&#125;&quot;, &quot;&#123;Shift&#125;&#123;Enter&#125;&quot;), waitTime=0) wx.SendKeys(&quot;&#123;Enter&#125;&quot;, waitTime=0) wx.TextControl(SubName=ar[0][:5]).Click() else: # If there is no reply, send a default message wx.SwitchToThisWindow() wx.SendKeys(&quot;Unknown&quot;, waitTime=0) wx.SendKeys(&quot;&#123;Enter&#125;&quot;, waitTime=0) wx.TextControl(SubName=last_msg[:5]).Click() except Exception as e: print(f&quot;Error: &#123;e&#125;&quot;) break ExecutionThe script is designed to be run directly. If the script is run directly (i.e., not imported as a module), it calls the main function and starts the automated chat response process. ConclusionIn summary, this Python project is a sophisticated example of how to use OpenAI’s GPT-3 model to automate responses in a chat application. It demonstrates how to interact with the GPT-3 model, handle user interface elements in a chat application, and manage conversation history for context-aware responses. The project is a testament to the potential of AI in automating tasks and enhancing user experience in messaging platforms. Complete Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102from typing import Listimport pandas as pdimport numpy as npfrom uiautomation import WindowControlimport openaiapiKey = &quot;&quot;template = &quot;&quot;# Define a function to handle the interaction with the GPT-3 modeldef GPT(text: str, record: List[dict]) -&gt; str: # Append the user&#x27;s message to the conversation record record.append(&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: text&#125;) # Print the user&#x27;s message for debugging purposes print(text) # Set the OpenAI API key openai.api_key = apiKey # Define the model ID id = &quot;gpt-3.5-turbo&quot; # Initialize a question string with the user&#x27;s text question = &quot;###&quot; + text + &quot;###&quot; # Create a completion using the OpenAI API response = openai.ChatCompletion.create( model=id, messages=record, temperature=0.1, top_p=0.1, max_tokens=2048, ) # Extract the total token usage from the response for debugging purposes usage = response.usage[&quot;total_tokens&quot;] # Extract the content from the assistant&#x27;s message in the response response = response[&quot;choices&quot;][0][&quot;message&quot;][&quot;content&quot;] # Append the assistant&#x27;s message to the conversation record record.append(&#123;&quot;role&quot;: &quot;assistant&quot;, &quot;content&quot;: response&#125;) # Return the assistant&#x27;s response return response# Main functiondef main(): # Initialize the conversation with the user&#x27;s template mem = [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: template&#125;] try: # Create a WindowControl object for the &quot;微信&quot; window wx = WindowControl(Name=&quot;微信&quot;) print(wx) wx.SwitchToThisWindow() # Create a ListControl object for the &quot;会话&quot; list in the window chat = wx.ListControl(Name=&quot;会话&quot;) print(&quot;Find chat and combine:&quot;, chat) except Exception as e: print(f&quot;Error: &#123;e&#125;&quot;) return # Main loop while True: try: # Look for unread messages in the chat unread = chat.TextControl(searchDepth=4) # Wait until an unread message appears while not unread.Exists(0): pass print(&quot;Find unread:&quot;, unread) # If there is an unread message, click on it if not unread.Name: continue unread.Click(simulateMove=False) # Extract the content of the last message last_msg = wx.ListControl(Name=&quot;消息&quot;).GetChildren()[-1].Name print(&quot;Last message:&quot;, last_msg) # Generate a reply using the GPT-3 model reply = GPT(last_msg, mem) # If the conversation record has more than 6 messages, trim it down if len(mem) &gt; 6: mem = mem[3:] mem = [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: template&#125;] + mem print(&quot;memory size:&quot;, len(mem)) # Prepare the reply to be sent ar = [reply] # If there is a reply, send it if ar: wx.SwitchToThisWindow() wx.SendKeys(ar[0].replace( &quot;&#123;br&#125;&quot;, &quot;&#123;Shift&#125;&#123;Enter&#125;&quot;), waitTime=0) wx.SendKeys(&quot;&#123;Enter&#125;&quot;, waitTime=0) wx.TextControl(SubName=ar[0][:5]).Click() else: # If there is no reply, send a default message wx.SwitchToThisWindow() wx.SendKeys(&quot;Unknown&quot;, waitTime=0) wx.SendKeys(&quot;&#123;Enter&#125;&quot;, waitTime=0) wx.TextControl(SubName=last_msg[:5]).Click() except Exception as e: print(f&quot;Error: &#123;e&#125;&quot;) break# Run the main function if this script is run directlyif __name__ == &quot;__main__&quot;: main()","tags":[{"name":"openAI","slug":"openAI","permalink":"https://dawn-cmd.github.io/tags/openAI/"},{"name":"Python","slug":"Python","permalink":"https://dawn-cmd.github.io/tags/Python/"}],"categories":[{"name":"applications","slug":"applications","permalink":"https://dawn-cmd.github.io/categories/applications/"}]},{"title":"A Multifaceted Translation Tool: Integrating GPT-3.5 Turbo and Wox for Seamless Language Processing(zh-CN)","date":"2023-03-24T21:51:14.000Z","path":"2023/03/24/A-Multifaceted-Translation-Tool-Integrating-GPT-3-5-Turbo-and-Wox-for-Seamless-Language-Processing-zh-CN/","text":"English Version 摘要本文介绍了一种功能强大的翻译工具，将 OpenAI 的先进 GPT-3.5 Turbo 语言模型与用户友好的 Wox 启动器插件系统相结合。该工具可以识别输入文本的语言，将中文文本翻译成英文或将英文文本翻译成中文，并用中文提供解释和示例。本文阐述了核心功能，与 Wox 启动器的交互以及使用 pyperclip 库实现的剪贴板集成。我们还提供了一段代码示例，以演示其实现。 引言在本文中，我们介绍了一种功能强大的翻译工具，将 OpenAI 的尖端 GPT-3.5 Turbo 语言模型与用户友好的 Wox 启动器插件系统相结合。该工具旨在识别输入文本的语言，将中文文本翻译成英文或其他语言的文本翻译成中文，并提供中文解释和示例。 利用 GPT-3.5 TurboOpenAI 的 GPT-3.5 Turbo 语言模型以高效处理复杂语言任务而闻名。该翻译工具利用模型的功能，通过实现一个翻译函数来接收文本输入，构建一个格式化的问题发送给模型，并接收响应。然后解析响应，提取相关信息并将其作为列表返回。您可以在此处获取有关 ChatAPI 的更多信息：openAI 文档 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364def translate(text: str) -&gt; list: openai.api_key = KEY id = &quot;gpt-3.5-turbo&quot; question = &quot;&quot;&quot;1: Check the text&#x27;s language2: If language != Chinese &#123; translate it into Chinese &#125; else &#123; translate it into English &#125; 3: Desired format:language: -||-translate: -||-explanation: -||-example: -||-##Text1: ###Hello###language: Englishtranslate: 你好explanation: 这是常用的问候语example: Hello, how are you today?##Text2: ###你好###language: Chinesetranslate: Helloexplanation: 这是常用的问候语example: 你好，你今天怎么样?##Text3: ###こんにちは###language: Japanesetranslate: 你好explanation: 这是常用的问候语example: こんにちは、今日はお元気ですか?##Text4: ###안녕하세요###language: Koreantranslate: 你好explanation: 这是常用的问候语example: 안녕하세요, 오늘은 어떻게 지내세요?##Text5: &quot;&quot;&quot; question += &quot;###&quot; + text + &quot;###&quot; response = openai.ChatCompletion.create( model=id, messages=[&#123; &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: question &#125;], temperature=0, top_p=0.1, max_tokens=2048, ) usage = response.usage[&quot;total_tokens&quot;] response = response[&quot;choices&quot;][0][&quot;message&quot;][&quot;content&quot;] # print(response) response = list(response.split(&quot;\\n&quot;)) response.append(&quot;usage: &quot; + str(usage)) return response 与 Wox 启动器集成Wox 启动器插件系统为用户提供了一个方便的互动的界面来使用翻译工具。通过创建一个继承自 Wox 类的主类，该工具定义了一个查询方法来处理用户输入并显示结果。当用户输入一个以 “&amp;” 结尾的关键字时，代码调用翻译函数，将响应显示为可选择的项目列表。您可以在此处获取有关 Wox 启动器插件开发的更多信息：Wox 文档 123456789101112131415161718192021class main(Wox): def query(self, keyword: str): results = [] if not keyword.endswith(&#x27;&amp;&#x27;): return results response: list[str] = translate(keyword[:-1]) for reponse in response: results.append(&#123; &quot;IcoPath&quot;: &quot;Images/ico.png&quot;, &quot;Title&quot;: reponse, &quot;SubTitle&quot;: &quot;Copy&quot;, &quot;JsonRPCAction&quot;: &#123; &quot;method&quot;: &quot;copy&quot;, &quot;parameters&quot;: [reponse], &quot;dontHideAfterAction&quot;: False &#125;, &#125;) return results def copy(self, word: str): pyperclip.copy(word) 集成剪贴板为了提高用户体验，脚本集成了 pyperclip 库，使用户只需点击即可将所选文本复制到剪贴板。在选择结果时，触发复制方法，轻松为用户复制文本以便粘贴到其他应用程序中。 显示 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697import openaifrom wox import Woximport pyperclipKEY = &quot;&quot;def translate(text: str) -&gt; list: openai.api_key = KEY id = &quot;gpt-3.5-turbo&quot; question = &quot;&quot;&quot;1: Check the text&#x27;s language2: If language != Chinese &#123; translate it into Chinese &#125; else &#123; translate it into English &#125; 3: Desired format:language: -||-translate: -||-explanation: -||-example: -||-##Text1: ###Hello###language: Englishtranslate: 你好explanation: 这是常用的问候语example: Hello, how are you today?##Text2: ###你好###language: Chinesetranslate: Helloexplanation: 这是常用的问候语example: 你好，你今天怎么样?##Text3: ###こんにちは###language: Japanesetranslate: 你好explanation: 这是常用的问候语example: こんにちは、今日はお元気ですか?##Text4: ###안녕하세요###language: Koreantranslate: 你好explanation: 这是常用的问候语example: 안녕하세요, 오늘은 어떻게 지내세요?##Text5: &quot;&quot;&quot; question += &quot;###&quot; + text + &quot;###&quot; response = openai.ChatCompletion.create( model=id, messages=[&#123; &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: question &#125;], temperature=0, top_p=0.1, max_tokens=2048, ) usage = response.usage[&quot;total_tokens&quot;] response = response[&quot;choices&quot;][0][&quot;message&quot;][&quot;content&quot;] # print(response) response = list(response.split(&quot;\\n&quot;)) response.append(&quot;usage: &quot; + str(usage)) return responseclass main(Wox): def query(self, keyword: str): results = [] if not keyword.endswith(&#x27;&amp;&#x27;): return results response: list[str] = translate(keyword[:-1]) for reponse in response: results.append(&#123; &quot;IcoPath&quot;: &quot;Images/ico.png&quot;, &quot;Title&quot;: reponse, &quot;SubTitle&quot;: &quot;Copy&quot;, &quot;JsonRPCAction&quot;: &#123; &quot;method&quot;: &quot;copy&quot;, &quot;parameters&quot;: [reponse], &quot;dontHideAfterAction&quot;: False # 运行后是否隐藏Wox窗口 &#125;, &#125;) return results def copy(self, word: str): pyperclip.copy(word)if __name__ == &quot;__main__&quot;: main()","tags":[{"name":"openAI","slug":"openAI","permalink":"https://dawn-cmd.github.io/tags/openAI/"},{"name":"Python","slug":"Python","permalink":"https://dawn-cmd.github.io/tags/Python/"}],"categories":[{"name":"applications","slug":"applications","permalink":"https://dawn-cmd.github.io/categories/applications/"}]},{"title":"A Multifaceted Translation Tool: Integrating GPT-3.5 Turbo and Wox for Seamless Language Processing","date":"2023-03-24T21:26:55.000Z","path":"2023/03/24/A-Multifaceted-Translation-Tool-Integrating-GPT-3-5-Turbo-and-Wox-for-Seamless-Language-Processing/","text":"中文版 AbstractThis article presents a powerful translation tool that combines the advanced GPT-3.5 Turbo language model by OpenAI with the user-friendly Wox launcher plugin system. The tool identifies the input text’s language, translates Chinese text to English or English text to Chinese, and provides an explanation and example in Chinese. The article explains the core functionality, interaction with Wox launcher, and clipboard integration using the pyperclip library. We also provide an example of the code to demonstrate its implementation. IntroductionIn this article, we introduce a powerful translation tool that integrates the cutting-edge GPT-3.5 Turbo language model by OpenAI with the user-friendly Wox launcher plugin system. This tool is designed to identify the input text’s language, translate Chinese text to English or other languages’ text to Chinese, and provide an explanation and an example in Chinese. Harnessing GPT-3.5 TurboThe GPT-3.5 Turbo language model by OpenAI is known for its ability to handle complex language tasks efficiently. This translation tool utilizes the model’s capabilities by implementing a translate function that takes a text input, constructs a formatted question to send to the model, and receives a response. The response is then parsed, extracting the relevant information and returning it as a list. You can get more information about ChatAPI here: openAI documentation 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364def translate(text: str) -&gt; list: openai.api_key = KEY id = &quot;gpt-3.5-turbo&quot; question = &quot;&quot;&quot;1: Check the text&#x27;s language2: If language != Chinese &#123; translate it into Chinese &#125; else &#123; translate it into English &#125; 3: Desired format:language: -||-translate: -||-explanation: -||-example: -||-##Text1: ###Hello###language: Englishtranslate: 你好explanation: 这是常用的问候语example: Hello, how are you today?##Text2: ###你好###language: Chinesetranslate: Helloexplanation: 这是常用的问候语example: 你好，你今天怎么样?##Text3: ###こんにちは###language: Japanesetranslate: 你好explanation: 这是常用的问候语example: こんにちは、今日はお元気ですか?##Text4: ###안녕하세요###language: Koreantranslate: 你好explanation: 这是常用的问候语example: 안녕하세요, 오늘은 어떻게 지내세요?##Text5: &quot;&quot;&quot; question += &quot;###&quot; + text + &quot;###&quot; response = openai.ChatCompletion.create( model=id, messages=[&#123; &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: question &#125;], temperature=0, top_p=0.1, max_tokens=2048, ) usage = response.usage[&quot;total_tokens&quot;] response = response[&quot;choices&quot;][0][&quot;message&quot;][&quot;content&quot;] # print(response) response = list(response.split(&quot;\\n&quot;)) response.append(&quot;usage: &quot; + str(usage)) return response Integrating with Wox LauncherThe Wox launcher plugin system offers a convenient and interactive interface for users to engage with the translation tool. By creating a main class that inherits from the Wox class, the tool defines a query method to handle user input and display results. When a user enters a keyword ending with an ampersand (&amp;), the code calls the translate function, displaying the response as a list of selectable items. You can get more information about the Wox launcher plugin development here: Wox Documentation 123456789101112131415161718192021class main(Wox): def query(self, keyword: str): results = [] if not keyword.endswith(&#x27;&amp;&#x27;): return results response: list[str] = translate(keyword[:-1]) for reponse in response: results.append(&#123; &quot;IcoPath&quot;: &quot;Images/ico.png&quot;, &quot;Title&quot;: reponse, &quot;SubTitle&quot;: &quot;Copy&quot;, &quot;JsonRPCAction&quot;: &#123; &quot;method&quot;: &quot;copy&quot;, &quot;parameters&quot;: [reponse], &quot;dontHideAfterAction&quot;: False &#125;, &#125;) return results def copy(self, word: str): pyperclip.copy(word) Clipboard Integration for User ConvenienceTo enhance user experience, the script incorporates the pyperclip library, enabling users to copy the selected text to the clipboard with just a click. Upon selecting a result, the copy method is triggered, effortlessly copying the text for users to paste into other applications. Display Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697import openaifrom wox import Woximport pyperclipKEY = &quot;&quot;def translate(text: str) -&gt; list: openai.api_key = KEY id = &quot;gpt-3.5-turbo&quot; question = &quot;&quot;&quot;1: Check the text&#x27;s language2: If language != Chinese &#123; translate it into Chinese &#125; else &#123; translate it into English &#125; 3: Desired format:language: -||-translate: -||-explanation: -||-example: -||-##Text1: ###Hello###language: Englishtranslate: 你好explanation: 这是常用的问候语example: Hello, how are you today?##Text2: ###你好###language: Chinesetranslate: Helloexplanation: 这是常用的问候语example: 你好，你今天怎么样?##Text3: ###こんにちは###language: Japanesetranslate: 你好explanation: 这是常用的问候语example: こんにちは、今日はお元気ですか?##Text4: ###안녕하세요###language: Koreantranslate: 你好explanation: 这是常用的问候语example: 안녕하세요, 오늘은 어떻게 지내세요?##Text5: &quot;&quot;&quot; question += &quot;###&quot; + text + &quot;###&quot; response = openai.ChatCompletion.create( model=id, messages=[&#123; &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: question &#125;], temperature=0, top_p=0.1, max_tokens=2048, ) usage = response.usage[&quot;total_tokens&quot;] response = response[&quot;choices&quot;][0][&quot;message&quot;][&quot;content&quot;] # print(response) response = list(response.split(&quot;\\n&quot;)) response.append(&quot;usage: &quot; + str(usage)) return responseclass main(Wox): def query(self, keyword: str): results = [] if not keyword.endswith(&#x27;&amp;&#x27;): return results response: list[str] = translate(keyword[:-1]) for reponse in response: results.append(&#123; &quot;IcoPath&quot;: &quot;Images/ico.png&quot;, &quot;Title&quot;: reponse, &quot;SubTitle&quot;: &quot;Copy&quot;, &quot;JsonRPCAction&quot;: &#123; &quot;method&quot;: &quot;copy&quot;, &quot;parameters&quot;: [reponse], &quot;dontHideAfterAction&quot;: False # 运行后是否隐藏Wox窗口 &#125;, &#125;) return results def copy(self, word: str): pyperclip.copy(word)if __name__ == &quot;__main__&quot;: main()","tags":[{"name":"openAI","slug":"openAI","permalink":"https://dawn-cmd.github.io/tags/openAI/"},{"name":"Python","slug":"Python","permalink":"https://dawn-cmd.github.io/tags/Python/"}],"categories":[{"name":"applications","slug":"applications","permalink":"https://dawn-cmd.github.io/categories/applications/"}]},{"title":"Red-Black-Tree(zh-CN)","date":"2023-03-21T16:40:46.000Z","path":"2023/03/21/Red-Black-Tree-zh-CN/","text":"English Version 摘要红黑树是一种自平衡的二叉搜索树，用于按排序顺序存储和检索元素，并具有O（log n）时间复杂度的所有主要操作。它们被设计为内存高效和平衡，使它们比其他平衡树如AVL树更高效。在本文中，我们讨论了在Rust中实现红黑树，这是一种为性能和安全性而设计的现代编程语言。我们讨论了树的结构，以及插入，删除和搜索的函数。此外，我们还讨论了修复函数，用于在每次插入和删除后恢复树的高度平衡和颜色平衡属性。最后，我们讨论了左旋和右旋函数，用于维护红黑树的平衡属性。通过使用Rust来实现红黑树，我们可以利用该语言的性能和安全性功能来创建高效且可靠的数据结构。 什么是红黑树（RBT）？红黑树是一种二叉搜索树，其中每个节点都被着色为红色或黑色。节点的颜色用于平衡树，以使从根节点到任何叶子节点的最长路径不超过从根节点到任何其他叶子节点的最短路径的两倍。此属性称为高度平衡属性。 红黑树是按照以下规则构建的 每个节点都是红色或黑色。 根节点始终为黑色。 每个叶子（NIL）节点都是黑色的。 如果一个节点为红色，则它的两个子节点必须为黑色。 从给定节点到其任何后代NIL节点的每条路径必须包含相同数量的黑色节点。 通过为每个节点分配颜色并限制连续的着色节点数量，RBT确保最长的分支永远不会超过最短分支的两倍大小，从而提供更稳定和有效的树。 以下是RBT的视觉表示： 当我们按顺序插入“1, 2, 3, 4, 5”时，以下是BST和RBT之间的比较，展示了为什么在插入排序元素时RBT远比BST有效： 很明显，当收到排序序列时，BST将变得非常低效。而RBT在此情况下可以更加平衡。 红黑树函数红黑树支持以下函数： 插入：要将新节点插入红黑树中，我们首先创建一个具有给定键和值的新节点。然后，我们遍历树以找到插入新节点的正确位置。如果树为空，我们将新节点简单地作为树的根。如果树不为空，我们将新节点的键与当前正在检查的节点的键进行比较。如果新节点的键小于当前节点的键，则移动到当前节点的左子节点。如果新节点的键大于当前节点的键，则移动到当前节点的右子节点。我们重复这个过程，直到我们找到一个可以插入新节点的空位置。 删除：要从红黑树中删除节点，我们首先搜索具有给定键的节点。如果找不到节点，我们简单地返回而不做任何事情。如果找到节点，我们用其后继节点替换它，后继节点是节点右子树中键值最小的节点。然后，我们使用类似的过程从树中删除后继节点。 搜索：在红黑树中搜索节点类似于在二叉搜索树中搜索。我们从根节点开始，将给定键与当前节点的键进行比较。如果键相等，我们返回当前节点的值。如果给定键小于当前节点的键，我们移动到左子节点。如果给定键大于当前节点的键，则移动到右子节点。我们重复这个过程，直到我们找到具有给定键的节点或到达叶子节点。 Rust中的红黑树代码要在Rust中实现红黑树，我们首先定义一个Node结构来表示树中的每个节点。Node结构包含节点的键，值，颜色和左右子节点字段。 1234567891011enum Color &#123; // Defines an enum called &#x27;Color&#x27; Red, // Enum variant representing the color red Black, // Enum variant representing the color black&#125;struct Node&lt;K, V&gt; &#123; // Defines a struct called &#x27;Node&#x27; with generic parameters &#x27;K&#x27; and &#x27;V&#x27; key: K, // Field representing the key of the node value: V, // Field representing the value of the node color: Color, // Field representing the color of the node, which is of type &#x27;Color&#x27; enum left: Option&lt;Box&lt;Node&lt;K, V&gt;&gt;&gt;, // Field representing the left child node of the current node (if exists); it is an Option type and wrapped inside a box right: Option&lt;Box&lt;Node&lt;K, V&gt;&gt;&gt;, // Field representing the right child node of the current node (if exists); it is an Option type and wrapped inside a box&#125; 我们还定义了一个RBTree结构来表示整个红黑树。RBTree结构包含一个根节点和用于插入，删除和搜索树中元素的方法。 123pub struct RBTree&lt;K: Ord, V&gt; &#123; // Defines a struct called &#x27;RBTree&#x27; with generic parameters &#x27;K&#x27; and &#x27;V&#x27;; &#x27;K&#x27; must implement &#x27;Ord&#x27; trait root: Option&lt;Box&lt;Node&lt;K, V&gt;&gt;&gt;, // Field representing the root node of the red-black tree; it is an Option type and wrapped inside a box&#125; 左旋和右旋这些函数执行给定节点及其子节点的左旋或右旋操作。rotate_left函数接收一个可变引用到一个节点，并将其右子节点向左旋转，而rotate_right函数接收一个可变引用到一个节点，并将其左子节点向右旋转。 在每次旋转期间，适当的指针被更新以反映树的新结构。每个节点的大小也被更新以反映旋转过程中发生的任何更改。 这些旋转函数由fix_after_insertion和fix_after_deletion方法用于维护红黑树的平衡属性。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152impl&lt;K: Ord, V&gt; RBTree&lt;K, V&gt; &#123; // Defines a private method called &#x27;rotate_left&#x27; that takes a mutable reference to a &#x27;Node&#x27; struct fn rotate_left(mut node: &amp;mut Node&lt;K, V&gt;) &#123; // Takes ownership of the right child node of the given node let mut right = node.right.take().unwrap(); // Moves the left child of the right child node to the right child of the given node node.right = right.left.take(); // Sets the parent of the right child node as the given node and returns the right child node right.left = Some(std::mem::replace(&amp;mut node, right)); // Sets the parent of the left child node of the given node to the given node if let Some(ref mut left) = node.left &#123; left.parent = Some(node); &#125; // Sets the parent of the right child node of the given node to the given node if let Some(ref mut right) = node.right &#123; right.parent = Some(node); &#125; // Updates the size of the given node node.update_size(); &#125; // Defines a private method called &#x27;rotate_right&#x27; that takes a mutable reference to a &#x27;Node&#x27; struct fn rotate_right(mut node: &amp;mut Node&lt;K, V&gt;) &#123; // Takes ownership of the left child node of the given node let mut left = node.left.take().unwrap(); // Moves the right child of the left child node to the left child of the given node node.left = left.right.take(); // Sets the parent of the left child node as the given node and returns the left child node left.right = Some(std::mem::replace(&amp;mut node, left)); // Sets the parent of the left child node of the given node to the given node if let Some(ref mut left) = node.left &#123; left.parent = Some(node); &#125; // Sets the parent of the right child node of the given node to the given node if let Some(ref mut right) = node.right &#123; right.parent = Some(node); &#125; // Updates the size of the given node node.update_size(); &#125;&#125; 插入函数插入函数遵循之前描述的插入函数相同的逻辑。我们创建一个具有给定键和值的新节点，并遍历树以找到插入新节点的正确位置。如果树为空，我们将新节点简单地作为树的根。如果树不为空，我们将新节点的键与当前正在检查的节点的键进行比较。如果新节点的键小于当前节点的键，则移动到当前节点的左子节点。如果新节点的键大于当前节点的键，则移动到当前节点的右子节点。我们重复这个过程，直到我们找到一个可以插入新节点的空位置。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106impl&lt;K: Ord, V&gt; RBTree&lt;K, V&gt; &#123; // Defines a private method called &#x27;fix_after_insertion&#x27; that takes a mutable reference to a &#x27;Node&#x27; struct and an optional mutable reference to the root node fn fix_after_insertion( mut node: &amp;mut Node&lt;K, V&gt;, root: Option&lt;&amp;mut Box&lt;Node&lt;K, V&gt;&gt;&gt;, ) &#123; // Sets the color of the inserted node as &#x27;Red&#x27; node.color = Color::Red; // Checks if the node is not the root node and its parent&#x27;s color is &#x27;Red&#x27; while node != root.unwrap() &amp;&amp; node.parent().unwrap().color == Color::Red &#123; let parent = node.parent().unwrap(); let grandparent = node.grandparent().unwrap(); // Checks if the parent is the left child of its grandparent if parent == grandparent.left.as_ref().unwrap() &#123; let uncle = grandparent.right.as_ref(); // Checks if the uncle node exists and its color is &#x27;Red&#x27; if uncle.is_some() &amp;&amp; uncle.unwrap().color == Color::Red &#123; // Recolors the parent, uncle, and grandparent nodes, and sets the current node to its grandparent parent.color = Color::Black; uncle.unwrap().color = Color::Black; grandparent.color = Color::Red; node = grandparent; &#125; else &#123; // Checks if the current node is the right child of its parent; if so, rotates it to the left around the parent node if node == parent.right.as_ref().unwrap() &#123; node = parent; RBTree::rotate_left(parent); &#125; // Recolors the parent and grandparent nodes, and rotates the grandparent node to the right parent.color = Color::Black; grandparent.color = Color::Red; RBTree::rotate_right(grandparent); &#125; &#125; else &#123; let uncle = grandparent.left.as_ref(); // Checks if the uncle node exists and its color is &#x27;Red&#x27; if uncle.is_some() &amp;&amp; uncle.unwrap().color == Color::Red &#123; // Recolors the parent, uncle, and grandparent nodes, and sets the current node to its grandparent parent.color = Color::Black; uncle.unwrap().color = Color::Black; grandparent.color = Color::Red; node = grandparent; &#125; else &#123; // Checks if the current node is the left child of its parent; if so, rotates it to the right around the parent node if node == parent.left.as_ref().unwrap() &#123; node = parent; RBTree::rotate_right(parent); &#125; // Recolors the parent and grandparent nodes, and rotates the grandparent node to the left parent.color = Color::Black; grandparent.color = Color::Red; RBTree::rotate_left(grandparent); &#125; &#125; &#125; root.unwrap().color = Color::Black; &#125; // Defines a public method called &#x27;insert&#x27; that takes a key and a value and adds it to the red-black tree pub fn insert(&amp;mut self, key: K, value: V) &#123; // Creates a new node with the given key, value, and color &#x27;Red&#x27; let mut new_node = Box::new(Node &#123; key, value, color: Color::Red, left: None, right: None, &#125;); // Checks if the root node exists if let Some(ref mut root) = self.root &#123; let mut current = root.as_mut(); // Traverses through the tree until it finds a suitable place to insert the new node loop &#123; if new_node.key &lt; current.key &#123; if let Some(ref mut left) = current.left &#123; current = left.as_mut(); &#125; else &#123; current.left = Some(new_node); break; &#125; &#125; else if new_node.key &gt; current.key &#123; if let Some(ref mut right) = current.right &#123; current = right.as_mut(); &#125; else &#123; current.right = Some(new_node); break; &#125; &#125; else &#123; // If the key already exists in the tree, updates its corresponding value and exits the loop current.value = new_node.value; return; &#125; &#125; // Fixes the tree after insertion of the new node RBTree::fix_after_insertion(current, Some(&amp;mut self.root)); &#125; else &#123; // If the root node does not exist, sets the color of the new node as &#x27;Black&#x27; and makes it the root node new_node.color = Color::Black; self.root = Some(new_node); &#125; &#125;&#125; 删除函数删除函数也遵循之前描述的删除函数相同的逻辑。我们搜索具有给定键的节点，并用其后继节点替换它，后继节点是节点右子树中键值最小的节点。然后，我们使用类似的过程从树中删除后继节点。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140// This function fixes the Red-Black Tree violations that may arise after a node deletionfn fix_after_deletion( mut node: &amp;mut Node&lt;K, V&gt;, root: Option&lt;&amp;mut Box&lt;Node&lt;K, V&gt;&gt;&gt;,) &#123; while node != root.unwrap() &amp;&amp; node.color == Color::Black &#123; // Get the parent and sibling of the current node let parent = node.parent_mut().unwrap(); let sibling = node.sibling().unwrap(); if sibling.color == Color::Red &#123; // Case 1: The sibling of the current node is red // Change the colors of the parent, sibling, and the child of the sibling sibling.color = Color::Black; parent.color = Color::Red; if node.is_left_child() &#123; // Rotate left if the current node is the left child RBTree::rotate_left(parent); sibling.color = parent.right.as_ref().unwrap().color; parent.right.as_mut().unwrap().color = Color::Black; node = parent.left.as_mut().unwrap(); &#125; else &#123; // Rotate right if the current node is the right child RBTree::rotate_right(parent); sibling.color = parent.left.as_ref().unwrap().color; parent.left.as_mut().unwrap().color = Color::Black; node = parent.right.as_mut().unwrap(); &#125; &#125; else &#123; if let (Some(left), Some(right)) = (sibling.left.as_ref(), sibling.right.as_ref()) &#123; if left.color == Color::Black &amp;&amp; right.color == Color::Black &#123; // Case 2: The sibling of the current node is black and both its children are black // Change the colors of the sibling and move up to the parent sibling.color = Color::Red; node = parent; &#125; else &#123; if node.is_left_child() &amp;&amp; right.color == Color::Black &#123; // Case 3: The sibling of the current node is black and the right child is black // Change the colors of the sibling and its left child, and rotate right sibling.color = Color::Red; left.color = Color::Black; RBTree::rotate_right(sibling); sibling = parent.right.as_mut().unwrap(); &#125; else if node.is_right_child() &amp;&amp; left.color == Color::Black &#123; // Case 3: The sibling of the current node is black and the left child is black // Change the colors of the sibling and its right child, and rotate left sibling.color = Color::Red; right.color = Color::Black; RBTree::rotate_left(sibling); sibling = parent.left.as_mut().unwrap(); &#125; // Case 4: The sibling of the current node is black and has a red child // Change the colors of the parent, sibling, and the child of the sibling sibling.color = parent.color; parent.color = Color::Black; if node.is_left_child() &#123; right.color = Color::Black; RBTree::rotate_left(parent); &#125; else &#123; left.color = Color::Black; RBTree::rotate_right(parent); &#125; break; &#125; &#125; else &#123; // Case 2: The sibling of the current node is black and has no children if let Some(left) = sibling.left.as_ref() &#123; if node.is_left_child() &#123; // Change the color of the sibling&#x27;s left child and rotate right left.color = Color::Black; sibling.color = parent.color; RBTree::rotate_right(parent); &#125; else &#123; // Change the color of the sibling and its left child, and rotate right left.color = Color::Red; RBTree::rotate_right(sibling); sibling = parent.right.as_mut().unwrap(); &#125; &#125; else &#123; if node.is_left_child() &#123; // Change the color of the sibling and its left child, and rotate right sibling.color = Color::Red; RBTree::rotate_right(sibling); sibling = parent.right.as_mut().unwrap(); &#125; else &#123; // Change the colors of the parent and sibling, and rotate left sibling.color = parent.color; parent.color = Color::Black; RBTree::rotate_left(parent); break; &#125; &#125; &#125; &#125; &#125; // Set the color of the current node to black node.color = Color::Black;&#125;// This function deletes a node from the Red-Black Tree according to the given keypub fn delete(&amp;mut self, key: &amp;K) -&gt; Option&lt;V&gt; &#123; let mut current = self.root.as_mut(); while let Some(node) = current &#123; if key &lt; &amp;node.key &#123; current = node.left.as_mut(); &#125; else if key &gt; &amp;node.key &#123; current = node.right.as_mut(); &#125; else &#123; if node.left.is_some() &amp;&amp; node.right.is_some() &#123; // If the node has two children, replace it with its successor and delete the successor let successor = node.right.as_mut().unwrap().min_node(); node.key = successor.key; node.value = std::mem::replace(&amp;mut successor.value, Default::default()); current = Some(&amp;mut *successor); &#125; else &#123; // If the node has one child or no children, remove it and fix any Red-Black Tree violations let child = if node.left.is_some() &#123; node.left.take() &#125; else &#123; node.right.take() &#125;; if node.color == Color::Black &#123; if let Some(ref c) = child &#123; RBTree::fix_after_deletion(c.as_mut(), Some(&amp;mut self.root)); &#125; else &#123; RBTree::fix_after_deletion(node, Some(&amp;mut self.root)); &#125; &#125; return Some(node.value); &#125; &#125; &#125; None&#125; 搜索函数搜索函数与之前描述的搜索函数类似。我们从根节点开始，将给定键与当前节点的键进行比较。如果键相等，我们返回当前节点的值。如果给定键小于当前节点的键，我们移动到左子节点。如果给定键大于当前节点的键，则移动到右子节点。我们重复这个过程，直到我们找到具有给定键的节点或到达叶子节点。 1234567891011121314151617impl&lt;K: Ord, V&gt; RBTree&lt;K, V&gt; &#123; pub fn search(&amp;self, key: &amp;K) -&gt; Option&lt;&amp;V&gt; &#123; let mut current = self.root.as_ref(); // Start search from the root of the tree. while let Some(node) = current &#123; // Traverse the tree until the key is found or a leaf node is reached. if key == &amp;node.key &#123; // If the key is found, return the corresponding value. return Some(&amp;node.value); &#125; else if key &lt; &amp;node.key &#123; // If the key is less than the current node&#x27;s key, search the left subtree. current = node.left.as_ref(); &#125; else &#123; // If the key is greater than the current node&#x27;s key, search the right subtree. current = node.right.as_ref(); &#125; &#125; None // If the key is not found, return None. &#125;&#125; 结论红黑树是一种自平衡的二叉搜索树，用于按排序顺序存储和检索元素，所有主要操作的时间复杂度为O(log n)。它们旨在具有内存效率和平衡性，使其比其他平衡树如AVL树更有效率。Rust是一种现代编程语言，旨在提高性能和安全性，因此它是实现数据结构如红黑树的绝佳选择。","tags":[{"name":"data structure","slug":"data-structure","permalink":"https://dawn-cmd.github.io/tags/data-structure/"},{"name":"Binary Search Tree","slug":"Binary-Search-Tree","permalink":"https://dawn-cmd.github.io/tags/Binary-Search-Tree/"},{"name":"Red Black Tree","slug":"Red-Black-Tree","permalink":"https://dawn-cmd.github.io/tags/Red-Black-Tree/"}],"categories":[{"name":"data structure & algorithm","slug":"data-structure-algorithm","permalink":"https://dawn-cmd.github.io/categories/data-structure-algorithm/"}]},{"title":"Red Black Tree","date":"2023-02-23T03:28:39.000Z","path":"2023/02/22/Red-Black-Tree/","text":"中文版链接 AbstractIn computer science, Red-Black Trees are a type of self-balancing binary search tree that are used to store and retrieve elements in sorted order with O(log n) time complexity for all major operations. They are designed to be memory-efficient and balanced, making them more efficient than other balanced trees like AVL trees. In this article, we have discussed the implementation of Red-Black Trees in Rust, a modern programming language designed for performance and safety. We have covered the structure of the tree, as well as the functions for insertion, deletion, and searching. Additionally, we have covered the fix functions that are used to restore the height balance and color balance properties of the tree after each insertion and deletion. Finally, we have discussed the left and right rotation functions that are used to maintain the balance properties of the Red-Black Tree. By using Rust to implement Red-Black Trees, we can take advantage of the language’s performance and safety features to create an efficient and reliable data structure. What is Red Black Tree (RBT)?Red-Black Trees are binary search trees where each node is colored either red or black. The color of the node is used to balance the tree so that the longest path from the root to any leaf node is no more than twice as long as the shortest path from the root to any other leaf node. This property is known as the height balance property. Red-Black Trees are constructed with the following rules Each node is either red or black. The root node is always black. Every leaf (NIL) node is black. If a node is red, then both its children must be black. Every path from a given node to any of its descendant NIL nodes must contain the same number of black nodes. By assigning each node with a color and by limiting the number of consecutive colored nodes, RBT ensures that the longest branches will never exceed twice the size of the shortest branches, thus providing a more stable and effective tree. For reference, here’s a visual representation of an RBT: Here’s a comparison between BST and RBT when we insert “1, 2, 3, 4, 5” in order, demonstrating why RBT is far more efficient than BST when sorted elements are inserted: Obviously, BST will become extremely low effective when receiving a sorted sequence. And RBT can become more balanced under this situation. Red-Black Tree FunctionsA Red-Black Tree supports the following functions: Insertion: To insert a new node into the Red-Black Tree, we first create a new node with the given key and value. We then traverse the tree to find the correct location to insert the new node. If the tree is empty, we simply make the new node the root of the tree. If the tree is not empty, we compare the new node’s key to the key of the current node we are examining. If the new node’s key is less than the current node’s key, we move to the left child of the current node. If the new node’s key is greater than the current node’s key, we move to the right child of the current node. We repeat this process until we find an empty location in the tree where we can insert the new node. Deletion: To delete a node from the Red-Black Tree, we first search for the node with the given key. If the node is not found, we simply return without doing anything. If the node is found, we replace it with its successor, which is the node with the smallest key in the node’s right subtree. We then delete the successor node from the tree using a similar process. Searching: Searching for a node in the Red-Black Tree is similar to searching in a binary search tree. We start at the root node and compare the given key with the key of the current node. If the keys are equal, we return the value of the current node. If the given key is less than the key of the current node, we move to the left child. If the given key is greater than the key of the current node, we move to the right child. We repeat this process until we find the node with the given key or reach a leaf node. Rust Code for Red-Black TreesTo implement Red-Black Trees in Rust, we first define a Node struct to represent each node in the tree. The Node struct contains fields for the node’s key, value, color, and left and right children. 1234567891011enum Color &#123; // Defines an enum called &#x27;Color&#x27; Red, // Enum variant representing the color red Black, // Enum variant representing the color black&#125;struct Node&lt;K, V&gt; &#123; // Defines a struct called &#x27;Node&#x27; with generic parameters &#x27;K&#x27; and &#x27;V&#x27; key: K, // Field representing the key of the node value: V, // Field representing the value of the node color: Color, // Field representing the color of the node, which is of type &#x27;Color&#x27; enum left: Option&lt;Box&lt;Node&lt;K, V&gt;&gt;&gt;, // Field representing the left child node of the current node (if exists); it is an Option type and wrapped inside a box right: Option&lt;Box&lt;Node&lt;K, V&gt;&gt;&gt;, // Field representing the right child node of the current node (if exists); it is an Option type and wrapped inside a box&#125; We also define an RBTree struct to represent the Red-Black Tree as a whole. The RBTree struct contains a root node and methods to insert, delete, and search for elements in the tree. 123pub struct RBTree&lt;K: Ord, V&gt; &#123; // Defines a struct called &#x27;RBTree&#x27; with generic parameters &#x27;K&#x27; and &#x27;V&#x27;; &#x27;K&#x27; must implement &#x27;Ord&#x27; trait root: Option&lt;Box&lt;Node&lt;K, V&gt;&gt;&gt;, // Field representing the root node of the red-black tree; it is an Option type and wrapped inside a box&#125; Left and Right RotateThese functions perform a left or right rotation of a given node and its children. The rotate_left function takes in a mutable reference to a node and rotates its right child to the left, while the rotate_right function takes in a mutable reference to a node and rotates its left child to the right. During each rotation, the appropriate pointers are updated to reflect the new structure of the tree. The size of each node is also updated to reflect any changes that occurred during the rotation. These rotation functions are used by the fix_after_insertion and fix_after_deletion methods to maintain the balance properties of the Red-Black Tree. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152impl&lt;K: Ord, V&gt; RBTree&lt;K, V&gt; &#123; // Defines a private method called &#x27;rotate_left&#x27; that takes a mutable reference to a &#x27;Node&#x27; struct fn rotate_left(mut node: &amp;mut Node&lt;K, V&gt;) &#123; // Takes ownership of the right child node of the given node let mut right = node.right.take().unwrap(); // Moves the left child of the right child node to the right child of the given node node.right = right.left.take(); // Sets the parent of the right child node as the given node and returns the right child node right.left = Some(std::mem::replace(&amp;mut node, right)); // Sets the parent of the left child node of the given node to the given node if let Some(ref mut left) = node.left &#123; left.parent = Some(node); &#125; // Sets the parent of the right child node of the given node to the given node if let Some(ref mut right) = node.right &#123; right.parent = Some(node); &#125; // Updates the size of the given node node.update_size(); &#125; // Defines a private method called &#x27;rotate_right&#x27; that takes a mutable reference to a &#x27;Node&#x27; struct fn rotate_right(mut node: &amp;mut Node&lt;K, V&gt;) &#123; // Takes ownership of the left child node of the given node let mut left = node.left.take().unwrap(); // Moves the right child of the left child node to the left child of the given node node.left = left.right.take(); // Sets the parent of the left child node as the given node and returns the left child node left.right = Some(std::mem::replace(&amp;mut node, left)); // Sets the parent of the left child node of the given node to the given node if let Some(ref mut left) = node.left &#123; left.parent = Some(node); &#125; // Sets the parent of the right child node of the given node to the given node if let Some(ref mut right) = node.right &#123; right.parent = Some(node); &#125; // Updates the size of the given node node.update_size(); &#125;&#125; Insertion Function in RustThe insert function in Rust follows the same logic as the insertion function described earlier. We create a new node with the given key and value and traverse the tree to find the correct location to insert the new node. If the tree is empty, we simply make the new node the root of the tree. If the tree is not empty, we compare the new node’s key to the key of the current node we are examining. If the new node’s key is less than the current node’s key, we move to the left child of the current node. If the new node’s key is greater than the current node’s key, we move to the right child of the current node. We repeat this process until we find an empty location in the tree where we can insert the new node. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106impl&lt;K: Ord, V&gt; RBTree&lt;K, V&gt; &#123; // Defines a private method called &#x27;fix_after_insertion&#x27; that takes a mutable reference to a &#x27;Node&#x27; struct and an optional mutable reference to the root node fn fix_after_insertion( mut node: &amp;mut Node&lt;K, V&gt;, root: Option&lt;&amp;mut Box&lt;Node&lt;K, V&gt;&gt;&gt;, ) &#123; // Sets the color of the inserted node as &#x27;Red&#x27; node.color = Color::Red; // Checks if the node is not the root node and its parent&#x27;s color is &#x27;Red&#x27; while node != root.unwrap() &amp;&amp; node.parent().unwrap().color == Color::Red &#123; let parent = node.parent().unwrap(); let grandparent = node.grandparent().unwrap(); // Checks if the parent is the left child of its grandparent if parent == grandparent.left.as_ref().unwrap() &#123; let uncle = grandparent.right.as_ref(); // Checks if the uncle node exists and its color is &#x27;Red&#x27; if uncle.is_some() &amp;&amp; uncle.unwrap().color == Color::Red &#123; // Recolors the parent, uncle, and grandparent nodes, and sets the current node to its grandparent parent.color = Color::Black; uncle.unwrap().color = Color::Black; grandparent.color = Color::Red; node = grandparent; &#125; else &#123; // Checks if the current node is the right child of its parent; if so, rotates it to the left around the parent node if node == parent.right.as_ref().unwrap() &#123; node = parent; RBTree::rotate_left(parent); &#125; // Recolors the parent and grandparent nodes, and rotates the grandparent node to the right parent.color = Color::Black; grandparent.color = Color::Red; RBTree::rotate_right(grandparent); &#125; &#125; else &#123; let uncle = grandparent.left.as_ref(); // Checks if the uncle node exists and its color is &#x27;Red&#x27; if uncle.is_some() &amp;&amp; uncle.unwrap().color == Color::Red &#123; // Recolors the parent, uncle, and grandparent nodes, and sets the current node to its grandparent parent.color = Color::Black; uncle.unwrap().color = Color::Black; grandparent.color = Color::Red; node = grandparent; &#125; else &#123; // Checks if the current node is the left child of its parent; if so, rotates it to the right around the parent node if node == parent.left.as_ref().unwrap() &#123; node = parent; RBTree::rotate_right(parent); &#125; // Recolors the parent and grandparent nodes, and rotates the grandparent node to the left parent.color = Color::Black; grandparent.color = Color::Red; RBTree::rotate_left(grandparent); &#125; &#125; &#125; root.unwrap().color = Color::Black; &#125; // Defines a public method called &#x27;insert&#x27; that takes a key and a value and adds it to the red-black tree pub fn insert(&amp;mut self, key: K, value: V) &#123; // Creates a new node with the given key, value, and color &#x27;Red&#x27; let mut new_node = Box::new(Node &#123; key, value, color: Color::Red, left: None, right: None, &#125;); // Checks if the root node exists if let Some(ref mut root) = self.root &#123; let mut current = root.as_mut(); // Traverses through the tree until it finds a suitable place to insert the new node loop &#123; if new_node.key &lt; current.key &#123; if let Some(ref mut left) = current.left &#123; current = left.as_mut(); &#125; else &#123; current.left = Some(new_node); break; &#125; &#125; else if new_node.key &gt; current.key &#123; if let Some(ref mut right) = current.right &#123; current = right.as_mut(); &#125; else &#123; current.right = Some(new_node); break; &#125; &#125; else &#123; // If the key already exists in the tree, updates its corresponding value and exits the loop current.value = new_node.value; return; &#125; &#125; // Fixes the tree after insertion of the new node RBTree::fix_after_insertion(current, Some(&amp;mut self.root)); &#125; else &#123; // If the root node does not exist, sets the color of the new node as &#x27;Black&#x27; and makes it the root node new_node.color = Color::Black; self.root = Some(new_node); &#125; &#125;&#125; Deletion Function in RustThe delete function in Rust also follows the same logic as the deletion function described earlier. We search for the node with the given key and replace it with its successor, which is the node with the smallest key in the node’s right subtree. We then delete the successor node from the tree using a similar process. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140// This function fixes the Red-Black Tree violations that may arise after a node deletionfn fix_after_deletion( mut node: &amp;mut Node&lt;K, V&gt;, root: Option&lt;&amp;mut Box&lt;Node&lt;K, V&gt;&gt;&gt;,) &#123; while node != root.unwrap() &amp;&amp; node.color == Color::Black &#123; // Get the parent and sibling of the current node let parent = node.parent_mut().unwrap(); let sibling = node.sibling().unwrap(); if sibling.color == Color::Red &#123; // Case 1: The sibling of the current node is red // Change the colors of the parent, sibling, and the child of the sibling sibling.color = Color::Black; parent.color = Color::Red; if node.is_left_child() &#123; // Rotate left if the current node is the left child RBTree::rotate_left(parent); sibling.color = parent.right.as_ref().unwrap().color; parent.right.as_mut().unwrap().color = Color::Black; node = parent.left.as_mut().unwrap(); &#125; else &#123; // Rotate right if the current node is the right child RBTree::rotate_right(parent); sibling.color = parent.left.as_ref().unwrap().color; parent.left.as_mut().unwrap().color = Color::Black; node = parent.right.as_mut().unwrap(); &#125; &#125; else &#123; if let (Some(left), Some(right)) = (sibling.left.as_ref(), sibling.right.as_ref()) &#123; if left.color == Color::Black &amp;&amp; right.color == Color::Black &#123; // Case 2: The sibling of the current node is black and both its children are black // Change the colors of the sibling and move up to the parent sibling.color = Color::Red; node = parent; &#125; else &#123; if node.is_left_child() &amp;&amp; right.color == Color::Black &#123; // Case 3: The sibling of the current node is black and the right child is black // Change the colors of the sibling and its left child, and rotate right sibling.color = Color::Red; left.color = Color::Black; RBTree::rotate_right(sibling); sibling = parent.right.as_mut().unwrap(); &#125; else if node.is_right_child() &amp;&amp; left.color == Color::Black &#123; // Case 3: The sibling of the current node is black and the left child is black // Change the colors of the sibling and its right child, and rotate left sibling.color = Color::Red; right.color = Color::Black; RBTree::rotate_left(sibling); sibling = parent.left.as_mut().unwrap(); &#125; // Case 4: The sibling of the current node is black and has a red child // Change the colors of the parent, sibling, and the child of the sibling sibling.color = parent.color; parent.color = Color::Black; if node.is_left_child() &#123; right.color = Color::Black; RBTree::rotate_left(parent); &#125; else &#123; left.color = Color::Black; RBTree::rotate_right(parent); &#125; break; &#125; &#125; else &#123; // Case 2: The sibling of the current node is black and has no children if let Some(left) = sibling.left.as_ref() &#123; if node.is_left_child() &#123; // Change the color of the sibling&#x27;s left child and rotate right left.color = Color::Black; sibling.color = parent.color; RBTree::rotate_right(parent); &#125; else &#123; // Change the color of the sibling and its left child, and rotate right left.color = Color::Red; RBTree::rotate_right(sibling); sibling = parent.right.as_mut().unwrap(); &#125; &#125; else &#123; if node.is_left_child() &#123; // Change the color of the sibling and its left child, and rotate right sibling.color = Color::Red; RBTree::rotate_right(sibling); sibling = parent.right.as_mut().unwrap(); &#125; else &#123; // Change the colors of the parent and sibling, and rotate left sibling.color = parent.color; parent.color = Color::Black; RBTree::rotate_left(parent); break; &#125; &#125; &#125; &#125; &#125; // Set the color of the current node to black node.color = Color::Black;&#125;// This function deletes a node from the Red-Black Tree according to the given keypub fn delete(&amp;mut self, key: &amp;K) -&gt; Option&lt;V&gt; &#123; let mut current = self.root.as_mut(); while let Some(node) = current &#123; if key &lt; &amp;node.key &#123; current = node.left.as_mut(); &#125; else if key &gt; &amp;node.key &#123; current = node.right.as_mut(); &#125; else &#123; if node.left.is_some() &amp;&amp; node.right.is_some() &#123; // If the node has two children, replace it with its successor and delete the successor let successor = node.right.as_mut().unwrap().min_node(); node.key = successor.key; node.value = std::mem::replace(&amp;mut successor.value, Default::default()); current = Some(&amp;mut *successor); &#125; else &#123; // If the node has one child or no children, remove it and fix any Red-Black Tree violations let child = if node.left.is_some() &#123; node.left.take() &#125; else &#123; node.right.take() &#125;; if node.color == Color::Black &#123; if let Some(ref c) = child &#123; RBTree::fix_after_deletion(c.as_mut(), Some(&amp;mut self.root)); &#125; else &#123; RBTree::fix_after_deletion(node, Some(&amp;mut self.root)); &#125; &#125; return Some(node.value); &#125; &#125; &#125; None&#125; Searching Function in RustThe search function in Rust is also similar to the search function described earlier. We start at the root node and compare the given key with the key of the current node. If the keys are equal, we return the value of the current node. If the given key is less than the key of the current node, we move to the left child. If the given key is greater than the key of the current node, we move to the right child. We repeat this process until we find the node with the given key or reach a leaf node. 1234567891011121314151617impl&lt;K: Ord, V&gt; RBTree&lt;K, V&gt; &#123; pub fn search(&amp;self, key: &amp;K) -&gt; Option&lt;&amp;V&gt; &#123; let mut current = self.root.as_ref(); // Start search from the root of the tree. while let Some(node) = current &#123; // Traverse the tree until the key is found or a leaf node is reached. if key == &amp;node.key &#123; // If the key is found, return the corresponding value. return Some(&amp;node.value); &#125; else if key &lt; &amp;node.key &#123; // If the key is less than the current node&#x27;s key, search the left subtree. current = node.left.as_ref(); &#125; else &#123; // If the key is greater than the current node&#x27;s key, search the right subtree. current = node.right.as_ref(); &#125; &#125; None // If the key is not found, return None. &#125;&#125; ConclusionRed-Black Trees are a type of self-balancing binary search tree that are used to store and retrieve elements in sorted order with O(log n) time complexity for all major operations. They are designed to be memory efficient and balanced, making them more efficient than other balanced trees like AVL trees. Rust is a modern programming language that is designed for performance and safety, making it a great choice for implementing data structures like the Red-Black Tree.","tags":[{"name":"data structure","slug":"data-structure","permalink":"https://dawn-cmd.github.io/tags/data-structure/"},{"name":"Binary Search Tree","slug":"Binary-Search-Tree","permalink":"https://dawn-cmd.github.io/tags/Binary-Search-Tree/"},{"name":"Red Black Tree","slug":"Red-Black-Tree","permalink":"https://dawn-cmd.github.io/tags/Red-Black-Tree/"}],"categories":[{"name":"data structure & algorithm","slug":"data-structure-algorithm","permalink":"https://dawn-cmd.github.io/categories/data-structure-algorithm/"}]}],"categories":[{"name":"applications","slug":"applications","permalink":"https://dawn-cmd.github.io/categories/applications/"},{"name":"data structure & algorithm","slug":"data-structure-algorithm","permalink":"https://dawn-cmd.github.io/categories/data-structure-algorithm/"}],"tags":[{"name":"ICPC","slug":"ICPC","permalink":"https://dawn-cmd.github.io/tags/ICPC/"},{"name":"DFS","slug":"DFS","permalink":"https://dawn-cmd.github.io/tags/DFS/"},{"name":"Disjoint Union Set","slug":"Disjoint-Union-Set","permalink":"https://dawn-cmd.github.io/tags/Disjoint-Union-Set/"},{"name":"Kattis","slug":"Kattis","permalink":"https://dawn-cmd.github.io/tags/Kattis/"},{"name":"Connective","slug":"Connective","permalink":"https://dawn-cmd.github.io/tags/Connective/"},{"name":"Rust","slug":"Rust","permalink":"https://dawn-cmd.github.io/tags/Rust/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://dawn-cmd.github.io/tags/Algorithm/"},{"name":"Dynamic Programming","slug":"Dynamic-Programming","permalink":"https://dawn-cmd.github.io/tags/Dynamic-Programming/"},{"name":"Recursion","slug":"Recursion","permalink":"https://dawn-cmd.github.io/tags/Recursion/"},{"name":"Matrix","slug":"Matrix","permalink":"https://dawn-cmd.github.io/tags/Matrix/"},{"name":"openAI","slug":"openAI","permalink":"https://dawn-cmd.github.io/tags/openAI/"},{"name":"Python","slug":"Python","permalink":"https://dawn-cmd.github.io/tags/Python/"},{"name":"data structure","slug":"data-structure","permalink":"https://dawn-cmd.github.io/tags/data-structure/"},{"name":"Binary Search Tree","slug":"Binary-Search-Tree","permalink":"https://dawn-cmd.github.io/tags/Binary-Search-Tree/"},{"name":"Red Black Tree","slug":"Red-Black-Tree","permalink":"https://dawn-cmd.github.io/tags/Red-Black-Tree/"}]}